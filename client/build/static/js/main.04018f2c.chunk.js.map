{"version":3,"sources":["components/styles/cameraWindow.module.css","components/styles/nobelCauseComponent.module.css","components/styles/footer.module.css","components/navbar.jsx","components/FeatureBlock.jsx","components/image_landing.jsx","components/nobelCause.jsx","components/home.jsx","components/footer.jsx","components/aboutus.jsx","components/camera.jsx","components/cameraWindow.jsx","components/camerautil.jsx","components/FileUpload.jsx","components/objectDetection.jsx","components/faceRecognition.jsx","components/imageToText.jsx","components/textToSpeech.jsx","components/speechToText.jsx","components/assistant.jsx","components/pageNotFound.jsx","App.js","index.js","components/styles/navbar.module.css"],"names":["module","exports","Navbar","showFeature","setShowFeature","useState","_jsxs","React","Fragment","children","_jsx","className","styles","bodyPadding","concat","navbar","title","Link","brand","to","style","color","type","id","margin","float","onClick","ev","preventDefault","x","Feature","props","padding","ImageLanding","history","useHistory","images","currentImageIndex","setCurrentImageIndex","useEffect","interval","setInterval","prevIndex","length","clearInterval","backgroundImage","activeClass","spy","smooth","offset","duration","handleExploreFeatures","push","jsx","NobelCauseComponent","container","para","Home","textAlign","paddingTop","background","fontFamily","fontSize","fontWeight","backgroundColor","NobleCause","Footer","footer","footerBottom","Aboutus","height","display","justifyContent","alignItems","WebkitBackgroundClip","WebkitTextFillColor","CameraFeed","Component","constructor","arguments","takePhoto","sendFile","this","canvas","getContext","drawImage","videoPlayer","toBlob","closeWindow","processDevices","devices","forEach","device","console","log","label","kind","setVideoDevice","_this$videoPlayer","deviceId","stream","navigator","mediaDevices","getUserMedia","audio","video","srcObject","play","componentDidMount","allDevices","enumerateDevices","componentWillUnmount","getTracks","track","readyState","stop","render","maxWidth","ref","width","heigh","CameraWindow","win","content","cross","Camera","Util","showCamera","setShowCamera","FileUpload","preview","setPreview","uploadImage","setUploadImage","onSubmit","border","borderRight","onChange","e","target","files","undefined","objectUrl","URL","createObjectURL","borderLeft","async","file","disabled","handleUploadImage","data","FormData","append","fetch","url","method","body","then","response","json","setImageOutputUrl","dataOutput","Date","now","setImageInputUrl","dataInput","setText","text","speak","catch","err","src","alt","ObjectDetection","imageInputURL","imageOutputURL","map","setMap","cancel","useSpeechSynthesis","speakOutput","M","i","speechText","Object","keys","sort","key","join","replace","textShadow","FaceRecognition","names","nameList","ImageToText","speaking","handleCopyText","clipboard","writeText","alert","TextToSpeech","pitch","setPitch","rate","setRate","voiceIndex","setVoiceIndex","supported","voices","onEnd","voice","htmlFor","name","value","event","option","index","lang","voiceURI","min","max","step","placeholder","SpeechToText","notes","setNotes","time","val","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","useSpeechRecognition","handleStartListening","SpeechRecognition","startListening","continuous","handleStopListening","abortListening","updatedNotes","unshift","Assistant","isListening","setIsListening","t1","commands","command","callback","link","stopListening","PageNotFound","App","Switch","Route","path","exact","component","Redirect","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,0BAA0B,QAAU,8BAA8B,MAAQ,4B,qBCAlGD,EAAOC,QAAU,CAAC,UAAY,uCAAuC,OAAS,oCAAoC,KAAO,kCAAkC,MAAQ,mC,qBCAnKD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6B,sJC+HlDC,MA3HAA,KACb,MAAOC,EAAaC,GAAkBC,oBAAS,GAC/C,OACEC,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAAA,OAAKC,UAAWC,IAAOC,cACvBP,eAAA,OAAKK,UAAS,sCAAAG,OAAwCF,IAAOG,OAAM,MAAKN,SAAA,CACtEC,cAAA,MAAIC,UAAS,gBAAAG,OAAkBF,IAAOI,OAAQP,SAC5CC,cAACO,IAAI,CAACN,UAAWC,IAAOM,MAAOC,GAAG,IAAGV,SAAC,cAKxCC,cAAA,UACEU,MAAO,CAAEC,MAAO,WAChBV,UAAU,iBACVW,KAAK,SACL,cAAY,WACZ,cAAY,iBACZ,gBAAc,gBACd,gBAAc,QACd,aAAW,oBAAmBb,SAE9BC,cAAA,KACEC,UAAU,iBACVS,MAAO,CAAEC,MAAO,WAChB,cAAY,WAIhBX,cAAA,OAAKC,UAAU,2BAA2BY,GAAG,gBAAed,SAC1DH,eAAA,MAAIK,UAAS,aAAgBS,MAAO,CAAEI,OAAQ,cAAef,SAAA,CAC3DH,eAAA,MAAIc,MAAO,CAAEK,MAAO,SAAUhB,SAAA,CAC5BC,cAACO,IAAI,CACHE,GAAG,IACHO,QAAUC,IACRA,EAAGC,iBACHxB,GAAgBD,EAAY,EAC5BM,SACH,aAGAN,GACCG,eAAA,MAAIK,UAAU,yBAAwBF,SAAA,CACpCC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAS,IAAAG,OAAMF,IAAOiB,GACtBV,GAAG,oBACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,uBAIHC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAS,IAAAG,OAAMF,IAAOiB,GACtBV,GAAG,oBACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,uBAIHC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAWC,IAAOiB,EAClBV,GAAG,iBACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,oBAIHC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAWC,IAAOiB,EAClBV,GAAG,kBACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,qBAIHC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAWC,IAAOiB,EAClBV,GAAG,kBACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,qBAIHC,cAAA,MAAAD,SACEC,cAACO,IAAI,CACHN,UAAWC,IAAOiB,EAClBV,GAAG,aACHO,QAASA,KACPtB,GAAe,EAAM,EACrBK,SACH,sBAQTC,cAAA,MAAIU,MAAO,CAAEK,MAAO,SAAUhB,SAC5BC,cAACO,IAAI,CAACE,GAAG,YAAWV,SAAC,yBAKd,ECzGNqB,MAhBEC,GAEbrB,cAACH,IAAMC,SAAQ,CAAAC,SACbC,cAAA,OAAKC,UAAU,kCAAiCF,SAC9CC,cAACO,IAAI,CAACE,GAAE,GAAAL,OAAKiB,EAAMZ,IAAKV,SACtBC,cAAA,OAAKU,MAAO,CAAEY,QAAS,OAAQvB,SAC7BC,cAAA,UAAQC,UAAU,uCAAsCF,SACrDsB,EAAMf,gB,QCsMNiB,MApGMA,KACnB,MAAMC,EAAUC,cAEVC,EAAS,CACb,kHACA,qEACA,kFACA,qEACA,kHACA,kHACA,oHAGKC,EAAmBC,GAAwBjC,mBAAS,GAE3DkC,qBAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BH,GAAsBI,IAAeA,EAAY,GAAKN,EAAOO,QAAO,GACnE,KAEH,MAAO,IAAMC,cAAcJ,EAAS,GACnC,CAACJ,EAAOO,SAMX,OACErC,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbH,eAAA,OACEK,UAAU,kBACVS,MAAO,CAAEyB,gBAAgB,OAAD/B,OAASsB,EAAOC,GAAkB,MAAM5B,SAAA,CAEhEH,eAAA,OAAKK,UAAU,QAAOF,SAAA,CACpBC,cAAA,KAAGC,UAAU,SAAQF,SAAC,YACtBC,cAAA,KAAGC,UAAU,OAAMF,SACjBC,cAAA,QAAMC,UAAU,aAAYF,SAAC,0EAKjCC,cAACO,OAAI,CACHE,GAAG,WACH2B,YAAY,SACZC,KAAK,EACLC,QAAQ,EACRC,QAAS,GACTC,SAAU,IAAIzC,SAEdC,cAAA,UACEC,UAAU,gCACVe,QA5BoByB,KAC5BjB,EAAQkB,KAAK,aAAa,EA2Ba3C,SAChC,uBAMLC,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,s2BAsCK,E,iBC1LN6C,MAdaA,IAExB5C,cAACH,IAAMC,SAAQ,CAAAC,SACbC,cAAA,OAAKC,UAAS,iBAAAG,OAAmBF,IAAO2C,WAAY9C,SAElDC,cAAA,KAAGC,UAAWC,IAAO4C,WCoMdC,MA3FFA,IAETnD,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAACuB,EAAY,IACbvB,cAAA,WAAAD,SACEH,eAAA,OACEK,UAAU,MACVS,MAAO,CACLsC,UAAW,SACXC,WAAY,OACZC,WAAY,UACZC,WAAY,qBACZpD,SAAA,CAEFC,cAAA,MACEU,MAAO,CACL0C,SAAU,OACVC,WAAY,UACZtD,SACH,iBAGDH,eAAA,OACEc,MAAO,CACLY,QAAS,GACTR,OAAQ,EACRkC,UAAW,SACXI,SAAU,OACVD,WAAY,qBACZpD,SAAA,CACH,wvBAUCC,cAAA,mBAONA,cAAA,WAASa,GAAG,WAAUd,SACpBH,eAAA,OAAKK,UAAU,MAAMS,MAAO,CAAEsC,UAAW,UAAWjD,SAAA,CAClDC,cAAA,MACEU,MAAO,CACL0C,SAAU,OACVC,WAAY,SACZJ,WAAY,OACZE,WAAY,qBACZpD,SACH,aAIDC,cAAA,OACEU,MAAO,CACLY,QAAS,GACTR,OAAQ,GACRwC,gBAAiB,4BACjBvD,SAEFC,cAAA,OAAKC,UAAU,YAAWF,SACxBH,eAAA,OAAKK,UAAU,gCAA+BF,SAAA,CAC5CC,cAACoB,EAAO,CAACX,GAAG,oBAAoBH,MAAM,qBAEtCN,cAACoB,EAAO,CAACX,GAAG,oBAAoBH,MAAM,qBAEtCN,cAACoB,EAAO,CAACX,GAAG,iBAAiBH,MAAM,kBAEnCN,cAACoB,EAAO,CAACX,GAAG,kBAAkBH,MAAM,mBAEpCN,cAACoB,EAAO,CAACX,GAAG,kBAAkBH,MAAM,mBAEpCN,cAACoB,EAAO,CAACX,GAAG,aAAaH,MAAM,0BAOzCN,cAACuD,EAAU,O,iBCpLFC,MAdAA,IAEX5D,eAAA,UAAQK,UAAS,YAAAG,OAAcF,IAAOuD,QAAS1D,SAAA,CAC7CC,cAAA,OAAKC,UAAU,QAEfD,cAAA,OAAKC,UAAS,GAAAG,OAAKF,IAAOwD,cAAe3D,SACvCC,cAACO,IAAI,CAACE,GAAG,WCkBFkD,MA5BCA,IAmBZ3D,cAAA,OAAKU,MAlBa,CAClBwC,WAAY,4CACZU,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZf,UAAW,UAYajD,SACtBH,eAAA,OAAAG,SAAA,CACEC,cAAA,MAAIU,MAXM,CACdC,MAAO,UACPuC,WAAY,2CACZc,qBAAsB,OACtBC,oBAAqB,cACrBZ,WAAY,QAMWtD,SAAC,sBACpBC,cAAA,MAAAD,SAAI,mFCtBG,MAAMmE,UAAmBC,YAAUC,cAAA,SAAAC,WAAA,KAmChDC,UAAY,KACV,MAAM,SAAEC,GAAaC,KAAKnD,MACVmD,KAAKC,OAAOC,WAAW,MAC/BC,UAAUH,KAAKI,YAAa,EAAG,EAAG,IAAK,KAC/CJ,KAAKC,OAAOI,OAAON,GACnBC,KAAKnD,MAAMyD,aAAa,CACxB,CAxCFC,eAAeC,GACbA,EAAQC,SAASC,IACfC,QAAQC,IAAIF,EAAOG,OACC,eAAhBH,EAAOI,MAAuBd,KAAKe,eAAeL,EAAO,GAEjE,CAEA,oBAAMK,CAAeL,GAAS,IAADM,EAC3B,MAAM,SAAEC,GAAaP,EACfQ,QAAeC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,MAAO,CAAEN,cAEXN,QAAQC,IAAI,SAAUM,GAClBlB,KAAKI,aAA0B,OAAXc,IACtBlB,KAAKI,YAAYoB,UAAYN,GACf,QAAhBF,EAAAhB,KAAKI,mBAAW,IAAAY,GAAhBA,EAAkBS,MACpB,CAEA,uBAAMC,GACJ,MAAMC,QAAmBR,UAAUC,aAAaQ,mBAChDjB,QAAQC,IAAI,aAAce,GAC1B3B,KAAKO,eAAeoB,EACtB,CACA,0BAAME,GACA7B,KAAKI,aAAeJ,KAAKI,YAAYoB,WACvCxB,KAAKI,YAAYoB,UAAUM,YAAYrB,SAAQ,SAAUsB,GACvDpB,QAAQC,IAAI,SAAUmB,GACG,SAArBA,EAAMC,YAAwC,UAAfD,EAAMjB,MACvCiB,EAAME,MAEV,GACJ,CAUAC,SACE,OACE9G,eAAA,OAAKK,UAAU,gBAAeF,SAAA,CAC5BC,cAAA,OAAKC,UAAU,wBAAuBF,SACpCC,cAAA,SACEU,MAAO,CAAEiG,SAAU,QACnBC,IAAMA,IACJzB,QAAQC,IAAI,WAAYwB,GACpBA,IAAKpC,KAAKI,YAAcgC,EAAG,EAEjCC,MAAM,MACNC,MAAM,UAGV9G,cAAA,UAAQC,UAAU,yBAAyBe,QAASwD,KAAKF,UAAUvE,SAAC,kBAGpEC,cAAA,OAAKC,UAAU,uBAAuBS,MAAO,CAAEmD,QAAS,QAAS9D,SAC/DC,cAAA,UAAQ6G,MAAM,MAAMjD,OAAO,MAAMgD,IAAMA,GAASpC,KAAKC,OAASmC,QAItE,E,qBC9CaG,MAjBO1F,GAElBrB,cAACH,IAAMC,SAAQ,CAAAC,SACbC,cAAA,OAAKC,UAAS,GAAAG,OAAKF,IAAO8G,KAAMjH,SAC9BH,eAAA,OAAKK,UAAS,GAAAG,OAAKF,IAAO+G,SAAUlH,SAAA,CAClCC,cAAA,MAAIC,UAAU,YAAWF,SAAC,WAC1BC,cAAA,KAAAD,SAAG,4DACHC,cAAA,UAAQC,UAAWC,IAAOgH,MAAOlG,QAASA,IAAMK,EAAMyD,cAAc/E,SAAC,WAGrEC,cAACmH,EAAM,IAAK9F,WCSP+F,MApBD/F,IACZ,MAAOgG,EAAYC,GAAiB3H,oBAAS,GAI7C,OACEC,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAAA,UACEC,UAAU,6CACVe,QAASA,KACPsG,GAAc,EAAK,EACnBvH,SACH,kBAGAsH,GAAcrH,cAACmH,EAAM,CAACrC,YAbPA,KAClBwC,GAAc,EAAM,KAYmCjG,MACtC,EC+GNkG,MA/HKlG,IAGlB,MAAOmG,EAASC,GAAc9H,sBACvB+H,EAAaC,GAAkBhI,qBAuCtC,OACEC,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAAA,OAAKC,UAAU,aAAYF,SACzBH,eAAA,QACEgI,SAAW3G,IACTA,EAAGC,gBAAgB,EACnBnB,SAAA,CAEFC,cAAA,KAAGC,UAAU,cAAaF,SAAC,gEAG3BH,eAAA,OAAKK,UAAU,MAAKF,SAAA,CAClBC,cAAA,OACEC,UAAU,YACVS,MAAO,CACLmH,OAAQ,oBACRC,YAAa,qCACb/H,SAEFC,cAAA,SAIEC,UAAU,qCACVW,KAAK,OACLmH,SAnCQC,IACpB,IAAKA,EAAEC,OAAOC,OAAmC,IAA1BF,EAAEC,OAAOC,MAAMjG,OAEpC,YADAwF,OAAWU,GAGbR,EAAeK,EAAEC,OAAOC,MAAM,IAC9B,MAAME,EAAYC,IAAIC,gBAAgBN,EAAEC,OAAOC,MAAM,IACrDT,EAAWW,EAAU,MAwCbpI,cAAA,SACAA,cAAA,OACEC,UAAU,YACVS,MAAO,CACLmH,OAAQ,oBACRU,WAAY,qCACZxI,SAEFC,cAACmH,EAAM,CACL5C,SAAUiE,UAER,MAAMJ,EAAYC,IAAIC,gBAAgBG,GACtChB,EAAWW,GACXT,EAAec,GACftD,QAAQC,IAAI,SAAS,SAK7BpF,cAAA,OAAKC,UAAU,oBAAmBF,SAChCC,cAAA,UACEC,UAAU,kBACVyI,UAAWlB,EACXxG,QAASA,IAlGK2H,MACxB,MAAMC,EAAO,IAAIC,SACjB1D,QAAQC,IAAI,+BACZwD,EAAKE,OAAO,OAAQpB,GAGpBqB,MAAM1H,EAAM2H,IAAK,CACfC,OAAQ,OACRC,KAAMN,IAELO,MAAMC,IACLA,EAASC,OAAOF,MAAMD,IACpB7H,EAAMiI,kBAAkB,iCAADlJ,OACY8I,EAAKK,WAAU,KAAAnJ,OAAIoJ,KAAKC,QAE3DpI,EAAMqI,iBAAiB,iCAADtJ,OACa8I,EAAKS,UAAS,KAAAvJ,OAAIoJ,KAAKC,QAE1DpI,EAAMuI,QAAQV,EAAKW,MACnBxI,EAAMyI,MAAMZ,EAAKW,MACjBpC,OAAWU,EAAU,GACrB,IAEH4B,OAAOC,IACN7E,QAAQC,IAAI4E,EAAI,GAChB,EAyEqBrB,GAAoB5I,SACpC,kBAMNyH,GACC5H,eAAA,OACEc,MAAO,CACLmH,OAAQ,oBACRvG,QAAS,OACTR,OAAQ,OACRkC,UAAW,UACXjD,SAAA,CAEFC,cAAA,MAAIC,UAAU,YAAWF,SAAC,YAC1BC,cAAA,OAAKU,MAAO,CAAEiG,SAAU,OAASsD,IAAKzC,EAAS0C,IAAI,kBAGxC,E,OCyNNC,MA9MSA,KACtB,MAAOC,EAAeV,GAAoB/J,mBAAS,KAC5C0K,EAAgBf,GAAqB3J,mBAAS,KAC9CkK,EAAMD,GAAWjK,mBAAS,KAC1B2K,EAAKC,GAAU5K,mBAAS,CAAC,IAC1B,MAAEmK,EAAK,OAAEU,GAAWC,+BAEpBC,EAAeb,IAEnB,IADA,IAAIc,EAAI,CAAC,EACAC,EAAI,EAAGA,EAAIf,EAAK5H,OAAQ2I,IAC1BD,EAAEd,EAAKe,IACPD,EAAEd,EAAKe,IAAMD,EAAEd,EAAKe,IAAM,EADdD,EAAEd,EAAKe,IAAM,EAGhC,IACIC,EADaC,OAAOC,KAAKJ,GAAGK,OAE7BV,KAAKW,GAAG,GAAA7K,OAAQuK,EAAEM,GAAI,KAAA7K,OAAI6K,KAC1BC,KAAK,MACLC,QAAQ,aAAc,WAEzBZ,EAAOI,GAEPb,EAAM,CAAED,KAAK,wBAADzJ,OAA0ByK,IAAe,EAGvD,OACEjL,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,OAAKC,UAAU,QAAQS,MAAO,CAAEmG,MAAO,MAAOjD,OAAQ,OAAQ7D,SAC5DC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAIU,MAAO,CAAE0K,WAAY,mBAAoBzK,MAAO,WAAYZ,SAAC,uBAEnEH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,CAC7BC,cAACuH,EAAU,CACTmC,iBAAkBA,EAClBJ,kBAAmBA,EACnBM,QAASA,EACTE,MAAOY,EACP1B,IAAK,6CAEPpJ,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC7BqK,GACCxK,eAAA,OAAKK,UAAU,cAAaF,SAAA,CAC1BC,cAAA,MAAAD,SAAI,gBACJC,cAAA,OAAKiK,IAAKG,EAAeF,IAAI,aAGhCG,GACCzK,eAAA,OAAKK,UAAU,eAAcF,SAAA,CAC3BC,cAAA,MAAAD,SAAI,WACJC,cAAA,OAAKiK,IAAKI,EAAgBH,IAAI,iBAInCL,GACCjK,eAAA,OAAKK,UAAU,SAAQF,SAAA,CACrBC,cAAA,MAAAD,SAAI,2BACJH,eAAA,OAAKK,UAAU,YAAWF,SAAA,CACxBH,eAAA,OAAKK,UAAU,UAASF,SAAA,CACtBC,cAAA,UACEC,UAAU,eACVe,QAASA,IAAM0J,EAAYb,GAAM9J,SAClC,UAGDC,cAAA,UAAQC,UAAU,cAAce,QAASwJ,EAAOzK,SAAC,YAInDC,cAAA,OAAKC,UAAU,OAAMF,SACnBC,cAAA,MAAIC,UAAU,qBAAoBF,SAC/B+K,OAAOC,KAAKT,GACVU,OACAV,KAAKW,GACJjL,cAAA,MAAAD,SAAA,GAAAK,OAAkBkK,EAAIW,GAAI,KAAA7K,OAAI6K,EAAG,MAAxBA,6BAanCjL,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,k4FAiHK,ECMNsL,MAhNSA,KACtB,MAAOjB,EAAeV,GAAoB/J,mBAAS,KAC5C0K,EAAgBf,GAAqB3J,mBAAS,KAC9CkK,EAAMD,GAAWjK,mBAAS,KAC1B2K,EAAKC,GAAU5K,mBAAS,CAAC,IAC1B,MAAEmK,EAAK,OAAEU,GAAWC,+BAEpBC,EAAeb,IACnB,MAAMc,EAAI,CAAC,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAK5H,OAAQ2I,IAC1BD,EAAEd,EAAKe,IACPD,EAAEd,EAAKe,IAAMD,EAAEd,EAAKe,IAAM,EADdD,EAAEd,EAAKe,IAAM,EAGhC,IAAIU,EAAQR,OAAOC,KAAKJ,GAExB,GAAqB,IAAjBW,EAAMrJ,OAER,YADA6H,EAAM,CAAED,KAAM,sBAIhB,IAAI0B,EAAWD,EAAMJ,KAAK,MAE1BX,EAAOI,GAEPb,EAAM,CAAED,KAAK,wBAADzJ,OAA0BmL,IAAa,EAGrD,OACE3L,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,OAAKC,UAAU,QAAQS,MAAO,CAAEmG,MAAO,MAAOjD,OAAQ,OAAQ7D,SAC5DC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAIU,MAAO,CAAE0K,WAAY,mBAAoBzK,MAAO,WAAYZ,SAAC,uBAInEH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,CAC7BC,cAACuH,EAAU,CACTmC,iBAAkBA,EAClBJ,kBAAmBA,EACnBM,QAASA,EACTE,MAAOY,EACP1B,IAAK,2CAEPpJ,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC7BqK,GACCxK,eAAA,OAAKK,UAAU,cAAaF,SAAA,CAC1BC,cAAA,MAAAD,SAAI,gBACJC,cAAA,OAAKiK,IAAKG,EAAeF,IAAI,aAGhCG,GACCzK,eAAA,OAAKK,UAAU,eAAcF,SAAA,CAC3BC,cAAA,MAAAD,SAAI,WACJC,cAAA,OAAKiK,IAAKI,EAAgBH,IAAI,iBAInCL,GACCjK,eAAA,OAAKK,UAAU,SAAQF,SAAA,CACrBC,cAAA,MAAAD,SAAI,yBACJH,eAAA,OAAKK,UAAU,YAAWF,SAAA,CACxBH,eAAA,OAAKK,UAAU,UAASF,SAAA,CACtBC,cAAA,UAAQC,UAAU,eAAee,QAASA,IAAM0J,EAAYb,GAAM9J,SAAC,UAGnEC,cAAA,UAAQC,UAAU,cAAce,QAASwJ,EAAOzK,SAAC,YAInDC,cAAA,OAAKC,UAAU,OAAMF,SACnBC,cAAA,MAAIC,UAAU,qBAAoBF,SAC/B+K,OAAOC,KAAKT,GACVU,OACAV,KAAKW,GACJjL,cAAA,MAAAD,SAAekL,GAANA,6BAanCjL,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,k4FAiHK,ECkINyL,MAjLKA,KAClB,MAAOpB,EAAeV,GAAoB/J,mBAAS,KAC5C0K,EAAgBf,GAAqB3J,mBAAS,KAC9CkK,EAAMD,GAAWjK,mBAAS,KAC3B,MAAEmK,EAAK,OAAEU,EAAM,SAAEiB,GAAahB,+BAapC,OACE7K,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC9BC,cAAA,OAAKC,UAAU,QAAQS,MAAO,CAAEmG,MAAO,MAAOjD,OAAQ,OAAQ7D,SAC5DC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAIU,MAAO,CAAEC,MAAO,UAAWyK,WAAY,uBAAwBrL,SAAC,oBAEtEH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,CAC7BC,cAACuH,EAAU,CACTmC,iBAAkBA,EAClBJ,kBAAmBA,EACnBM,QAASA,EACTE,MAzBKD,IACnBC,EAAM,CAAED,KAAK,wBAADzJ,OAA0ByJ,IAAS,EAyBjCb,IAAK,wCAEPpJ,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC7BqK,GACCxK,eAAA,OAAKK,UAAU,cAAaF,SAAA,CAC1BC,cAAA,MAAAD,SAAI,gBACJC,cAAA,OAAKiK,IAAKG,EAAeF,IAAI,aAGhCG,GACCzK,eAAA,OAAKK,UAAU,eAAcF,SAAA,CAC3BC,cAAA,MAAAD,SAAI,WACJC,cAAA,OAAKiK,IAAKI,EAAgBH,IAAI,iBAInCL,GACCjK,eAAA,OAAKK,UAAU,SAAQF,SAAA,CACrBC,cAAA,MAAAD,SAAI,mBACJH,eAAA,OAAKK,UAAU,YAAWF,SAAA,CACxBH,eAAA,OAAKK,UAAU,UAASF,SAAA,CACrB0L,EACCzL,cAAA,UAAQC,UAAU,cAAce,QAASwJ,EAAOzK,SAAC,kBAIjDC,cAAA,UAAQC,UAAU,eAAee,QAASA,IAAM8I,EAAM,CAAED,SAAQ9J,SAAC,qBAInEC,cAAA,UAAQC,UAAU,cAAce,QApD/B0K,KAErB/F,UAAUgG,UAAUC,UAAU/B,GAE9BgC,MAAM,kCAAkC,EAgDoC9L,SAAC,uBAI3DC,cAAA,OAAKC,UAAU,OAAMF,SAAE8J,sBASvC7J,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,i/EAkGN,ECuHK+L,MA1MMA,KACnB,MAAOjC,EAAMD,GAAWjK,mBAAS,KAC1BoM,EAAOC,GAAYrM,mBAAS,IAC5BsM,EAAMC,GAAWvM,mBAAS,IAC1BwM,EAAYC,GAAiBzM,mBAAS,OAIvC,MAAEmK,EAAK,OAAEU,EAAM,SAAEiB,EAAQ,UAAEY,EAAS,OAAEC,GAAW7B,6BAAmB,CACxE8B,MAJYA,SAORC,EAAQF,EAAOH,IAAe,KAEpC,OACEvM,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC9BC,cAAA,OAAKC,UAAU,QAAOF,SACpBC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAIC,UAAU,QAAOF,SAAC,qBAExBH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,EAC3BsM,GACArM,cAAA,KAAAD,SAAG,wEAKJsM,GACCzM,eAACC,IAAMC,SAAQ,CAAAC,SAAA,CACbH,eAAA,OAAKK,UAAU,qBAAoBF,SAAA,CACjCH,eAAA,OAAKK,UAAU,eAAcF,SAAA,CAC3BC,cAAA,SAAOyM,QAAQ,QAAO1M,SAAC,WACvBH,eAAA,UACEiB,GAAG,QACH6L,KAAK,QACLC,MAAOR,GAAc,GACrBpE,SAAW6E,IACTR,EAAcQ,EAAM3E,OAAO0E,MAAM,EAEnCjM,MAAO,CAAEiG,SAAU,QAAS5G,SAAA,CAE5BC,cAAA,UAAQ2M,MAAM,GAAE5M,SAAC,YAChBuM,EAAOhC,KAAI,CAACuC,EAAQC,IACnB9M,cAAA,UAA8B2M,MAAOG,EAAM/M,SAAA,GAAAK,OACrCyM,EAAOE,KAAI,OAAA3M,OAAMyM,EAAOH,OADjBG,EAAOG,kBAM1BpN,eAAA,OAAKK,UAAU,qBAAoBF,SAAA,CACjCH,eAAA,OAAKK,UAAU,cAAaF,SAAA,CAC1BC,cAAA,SAAOyM,QAAQ,OAAM1M,SAAC,UACtBC,cAAA,SACEY,KAAK,QACLqM,IAAI,MACJC,IAAI,IACJC,KAAK,MACLR,MAAOV,EACPlE,SAAW6E,GAAUV,EAAQU,EAAM3E,OAAO0E,SAE5C3M,cAAA,QAAAD,SAAOkM,OAETrM,eAAA,OAAKK,UAAU,eAAcF,SAAA,CAC3BC,cAAA,SAAOyM,QAAQ,QAAO1M,SAAC,WACvBC,cAAA,SACEY,KAAK,QACLqM,IAAI,IACJC,IAAI,IACJC,KAAK,MACLR,MAAOZ,EACPhE,SAAW6E,GAAUZ,EAASY,EAAM3E,OAAO0E,SAE7C3M,cAAA,QAAAD,SAAOgM,aAIbnM,eAAA,OAAKK,UAAU,YAAWF,SAAA,CACxBC,cAAA,SAAOyM,QAAQ,UAAS1M,SAAC,aACzBC,cAAA,YACEa,GAAG,UACH6L,KAAK,UACLU,YAAY,iDACZT,MAAO9C,EACP9B,SAAW6E,GAAUhD,EAAQgD,EAAM3E,OAAO0E,YAG9C3M,cAAA,OAAKC,UAAU,mBAAkBF,SAC/BC,cAAA,UACEC,UAAS,gBAAAG,OACPqL,EAAW,WAAa,IAE1BzK,QAASyK,EAAWjB,EAAS,IAAMV,EAAM,CAAED,OAAM2C,QAAOP,OAAMF,UAAShM,SAEtE0L,EAAW,OAAS,2BAUvCzL,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,2iFA4FN,E,iBCgEKsN,MA3KMA,KACnB,MAAOC,EAAOC,GAAY5N,mBAAS,CACjC,CAAE6N,KAAM,IAAKC,IAAK,kBAClB,CAAED,KAAM,IAAKC,IAAK,yBAGd,WACJC,EAAU,UACVC,EAAS,gBACTC,EAAe,iCACfC,GACEC,kCAEE,MAAEhE,GAAUW,+BAUlB,OAAKoD,EAKHjO,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC9BC,cAAA,OAAKC,UAAU,QAAOF,SACpBC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAAD,SAAI,qBAENH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,EAC3B4N,GACA3N,cAAA,OAAKC,UAAU,UAASF,SAAC,6CAI1B4N,GACC3N,cAAA,OAAKC,UAAU,UAASF,SAAC,0CAE3BH,eAAA,KAAAG,SAAA,CAAG,eAAa4N,EAAY,KAAO,UACjCA,GACA3N,cAAA,UAAQC,UAAU,kBAAkBe,QAhCvB+M,KAC3BC,IAAkBC,eAAe,CAAEC,YAAY,GAAO,EA+B0BnO,SAAC,UAIpE4N,GACC3N,cAAA,UAAQC,UAAU,oBAAoBe,QAjC1BmN,KAC1BH,IAAkBI,gBAAgB,EAgC+CrO,SAAC,SAItEC,cAAA,UAAQC,UAAU,kBAAkBe,QAAS4M,EAAgB7N,SAAC,UAG9DC,cAAA,UACEC,UAAU,kBACVyI,UAAWgF,EACX1M,QAASA,IAAM8I,EAAM,CAAED,KAAM6D,IAAc3N,SAC5C,wBAGDC,cAAA,SACC0N,GACC9N,eAAA,OAAAG,SAAA,CACEC,cAAA,MAAIC,UAAU,OAAMF,SAAC,eACrBC,cAAA,OAAKC,UAAU,aAAYF,SAAE2N,IAC7B1N,cAAA,UACEC,UAAU,oBACVe,QAASA,KACP,MAAMqN,EAAe,IAAIf,GACzBe,EAAaC,QAAQ,CAAEd,KAAMhE,KAAKC,MAAOgE,IAAKC,IAC9CH,EAASc,GACTT,GAAiB,EACjB7N,SACH,SAGDC,cAAA,UACEC,UAAU,eACVe,QAASA,KACP2E,UAAUgG,UAAUC,UAAU8B,GAC9BE,GAAiB,EACjB7N,SACH,wBAUfC,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,w1DA1ELC,cAAA,QAAAD,SAAM,+CA+IP,ECtOKwO,MAlJGA,KAChB,MAAM/M,EAAUC,eACV,MAAEqI,GAAUW,gCACX+D,EAAaC,GAAkB9O,oBAAS,IACvC+N,WAAYgB,GAAOZ,iCAE3BjM,qBAAU,KACH2M,GACHR,IAAkBI,gBACpB,GACC,CAACI,IAEJ,MAUMG,EAAW,CACf,CACEC,QAAS,UACTC,SAAWC,IACT,MAAM3N,EAAC,gBAAAf,OAAmB0O,GAC1B3J,QAAQC,IAAIjE,GACC,qBAAT2N,GACFhF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,sBACK,qBAAToM,GACThF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,sBACK,kBAAToM,GACThF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,mBACK,mBAAToM,GACThF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,oBACK,mBAAToM,GACThF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,oBACK,SAAToM,GACThF,EAAM,CAAED,KAAM1I,IACdK,EAAQkB,KAAK,MAEboH,EAAM,CAAED,KAAM,qCAChB,GAGJ,CACE+E,QAAS,MACTC,SAAUA,KACR/E,EAAM,CAAED,KAAM,WACd1E,QAAQC,IAAI,MAAM,IAOxB,OAFA0I,+BAAqB,CAAEa,aAGrB/O,eAAA,OAAKK,UAAU,kBAAiBF,SAAA,CAC9BC,cAAA,OAAKC,UAAU,QAAOF,SACpBC,cAAA,OAAKC,UAAU,eAAcF,SAC3BC,cAAA,OAAKC,UAAU,sBAAqBF,SAClCH,eAAA,OAAKK,UAAU,oBAAmBF,SAAA,CAChCC,cAAA,OAAKC,UAAU,kBAAiBF,SAC9BC,cAAA,MAAAD,SAAI,gBAENH,eAAA,OAAKK,UAAU,iBAAgBF,SAAA,CAC7BC,cAAA,MAAAD,SAAI,cACJC,cAAA,KAAAD,SAAI2O,GAAU,mCACd1O,cAAA,UACEgB,QAASwN,EA1DHO,KACpBN,GAAe,GACfT,IAAkBe,eAAe,EAPZd,KACrBQ,GAAe,GACfT,IAAkBC,eAAe,CAAEC,YAAY,GAAO,EA8DxCjO,UAAS,iBAAAG,OAAmBoO,EAAc,YAAc,IAAKzO,SAE5DyO,EAAc,YAAc,gCAOzCxO,cAAA,SAAO2C,KAAG,EAAA5C,SAAA,+/CAyDN,EC9YKiP,MARMA,IAEjBhP,cAACH,IAAMC,SAAQ,CAAAC,SACbC,cAAA,MAAAD,SAAI,mB,MCoCKkP,MA1BHA,IACVjP,cAACH,IAAMC,SAAQ,CAAAC,SACbH,eAAA,OAAKiB,GAAG,iBAAgBd,SAAA,CACtBH,eAAA,OAAKiB,GAAG,eAAcd,SAAA,CACpBC,cAACR,EAAM,IACPQ,cAAA,OAAAD,SACEH,eAACsP,IAAM,CAAAnP,SAAA,CACLC,cAACmP,IAAK,CAACC,KAAK,oBAAoBC,OAAK,EAACC,UAAWnF,IACjDnK,cAACmP,IAAK,CAACC,KAAK,oBAAoBC,OAAK,EAACC,UAAWjE,IACjDrL,cAACmP,IAAK,CAACC,KAAK,iBAAiBC,OAAK,EAACC,UAAW9D,IAC9CxL,cAACmP,IAAK,CAACC,KAAK,kBAAkBC,OAAK,EAACC,UAAWxD,IAC/C9L,cAACmP,IAAK,CAACC,KAAK,kBAAkBC,OAAK,EAACC,UAAWjC,IAC/CrN,cAACmP,IAAK,CAACC,KAAK,aAAaC,OAAK,EAACC,UAAWf,IAC1CvO,cAACmP,IAAK,CAACC,KAAK,YAAYC,OAAK,EAACC,UAAW3L,IACzC3D,cAACmP,IAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAWvM,IACjC/C,cAACmP,IAAK,CAACC,KAAK,kBAAkBC,OAAK,EAACC,UAAWN,IAE/ChP,cAACuP,IAAQ,CAAC9O,GAAG,4BAInBT,cAACwD,EAAM,SC7BbgM,IAAS9I,OACP1G,cAACyP,IAAa,CAAA1P,SACZC,cAACiP,EAAG,MAENS,SAASC,eAAe,Q,oBCV1BrQ,EAAOC,QAAU,CAAC,YAAc,4BAA4B,MAAQ,sBAAsB,MAAQ,sBAAsB,EAAI,kBAAkB,OAAS,uB","file":"static/js/main.04018f2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"win\":\"cameraWindow_win__24tPQ\",\"content\":\"cameraWindow_content__2CyJ1\",\"cross\":\"cameraWindow_cross__1PzRq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"nobelCauseComponent_container__2D9rP\",\"header\":\"nobelCauseComponent_header__33ap6\",\"para\":\"nobelCauseComponent_para__1MtrY\",\"image\":\"nobelCauseComponent_image__3-Jx6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__2RDRA\",\"footerBottom\":\"footer_footerBottom__rWlPg\"};","\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./styles/navbar.module.css\";\n\nconst Navbar = () => {\n  const [showFeature, setShowFeature] = useState(false);\n  return (\n    <React.Fragment>\n      <div className={styles.bodyPadding}></div>\n      <nav className={`navbar navbar-expand-md sticky-top ${styles.navbar}  `}>\n        <li className={`navbar-brand ${styles.title}`}>\n          <Link className={styles.brand} to=\"/\">\n            ScanVue\n          </Link>\n        </li>\n\n        <button\n          style={{ color: \"inherit\" }}\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarToggler\"\n          aria-controls=\"navbarToggler\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <i\n            className=\"fa fa-bars p-1\"\n            style={{ color: \"inherit\" }}\n            aria-hidden=\"true\"\n          ></i>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\n          <ul className={`navbar-nav`} style={{ margin: \"0 0 0 auto\" }}>\n            <li style={{ float: \"right\" }}>\n              <Link\n                to=\"/\"\n                onClick={(ev) => {\n                  ev.preventDefault();\n                  setShowFeature(!showFeature);\n                }}\n              >\n                FEATURES\n              </Link>\n              {showFeature && (\n                <ul className=\"nav-link dropdown-menu\">\n                  <li>\n                    <Link\n                      className={` ${styles.x}`}\n                      to=\"/object-detection\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Object Detection\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      className={` ${styles.x}`}\n                      to=\"/face-recognition\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Face Recognition\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      className={styles.x}\n                      to=\"/image-to-text\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Image To Text\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      className={styles.x}\n                      to=\"/text-to-speech\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Text To Speech\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      className={styles.x}\n                      to=\"/speech-to-text\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Speech To Text\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      className={styles.x}\n                      to=\"/assistant\"\n                      onClick={() => {\n                        setShowFeature(false);\n                      }}\n                    >\n                      Assistant\n                    </Link>\n                  </li>\n                </ul>\n              )}\n            </li>\n\n            <li style={{ float: \"right\" }}>\n              <Link to=\"/about-us\">ABOUT ME</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Navbar;\n\n\n\n\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Feature = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"col-lg-6 .col-sm-12 text-center\">\n        <Link to={`${props.to}`}>\n          <div style={{ padding: \"5px\" }}>\n            <button className=\"w-100 btn btn-outline-success btn-lg\">\n              {props.title}\n            </button>\n          </div>\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Feature;\n","// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-scroll\";\n//\n// const ImageLanding = () => {\n//   // List of background images\n//   const images = [\n//     \"https://images.pexels.com/photos/7488221/pexels-photo-7488221.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n//     \"https://images.pexels.com/photos/7188894/pexels-photo-7188894.jpeg\",\n//     \"https://i.pcmag.com/imagery/articles/007OEmxN7mGIsAUtQFSIa2g-2..v1675708680.jpg\",\n//     \"https://images.pexels.com/photos/7695415/pexels-photo-7695415.jpeg\",\n//     \"https://images.pexels.com/photos/7188804/pexels-photo-7188804.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n//      \"https://images.pexels.com/photos/7265371/pexels-photo-7265371.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n//     \"https://images.pexels.com/photos/8327775/pexels-photo-8327775.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n//     // Add more image URLs here\n//   ];\n//\n//   const [currentImageIndex, setCurrentImageIndex] = useState(0);\n//\n//   useEffect(() => {\n//     // Change background image every 5 seconds\n//     const interval = setInterval(() => {\n//       setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);\n//     }, 5000);\n//\n//     return () => clearInterval(interval);\n//   }, [images.length]);\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"backgroundImage\"\n//         style={{ backgroundImage: `url(${images[currentImageIndex]})` }}\n//       >\n//         <div className=\"title\">\n//           <p className=\"header\">ScanVue</p>\n//           <p className=\"text\">\n//             <span className=\"borderText\">Empowering independence for those who see the world differently.</span>\n//           </p>\n//         </div>\n//         <Link\n//           to=\"Features\"\n//           activeClass=\"active\"\n//           spy={true}\n//           smooth={true}\n//           offset={-70}\n//           duration={500}\n//         >\n//           <button className=\"btn btn-primary p-3 donateBtn\">\n//             Explore Features\n//           </button>\n//         </Link>\n//       </div>\n//\n//       <style jsx>{`\n//         .backgroundImage {\n//           background-size: cover;\n//           background-position: center;\n//           height: 100vh;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           flex-direction: column;\n//           color: white;\n//           font-family: 'Arial', sans-serif; /* Change font-family */\n//         }\n//\n//         .title {\n//           text-align: center;\n//         }\n//\n//         .header {\n//           font-size: 3rem; /* Increase font size */\n//           font-weight: bold;\n//           border-bottom: 4px solid white; /* Add border to header */\n//           padding-bottom: 10px; /* Add padding to bottom */\n//           text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* Add shadow effect */\n//         }\n//\n//         .text {\n//           font-size: 1.5rem; /* Increase font size */\n//           margin-top: 1rem; /* Add some spacing */\n//         }\n//\n//         .borderText {\n//           text-shadow: 1px 1px 2px black; /* Add small border to text */\n//         }\n//\n//         .donateBtn {\n//           margin-top: 2rem; /* Add margin to the button */\n//         }\n//       `}</style>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default ImageLanding;\n\n\n\n\n\n\n///////////////////////////////////////////////// landing_page.jsx ---- Go to Assistant  /////////////////////////////////////\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-scroll\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ImageLanding = () => {\n  const history = useHistory();\n\n  const images = [\n    \"https://images.pexels.com/photos/7488221/pexels-photo-7488221.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n    \"https://images.pexels.com/photos/7188894/pexels-photo-7188894.jpeg\",\n    \"https://i.pcmag.com/imagery/articles/007OEmxN7mGIsAUtQFSIa2g-2..v1675708680.jpg\",\n    \"https://images.pexels.com/photos/7695415/pexels-photo-7695415.jpeg\",\n    \"https://images.pexels.com/photos/7188804/pexels-photo-7188804.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n    \"https://images.pexels.com/photos/7265371/pexels-photo-7265371.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n    \"https://images.pexels.com/photos/8327775/pexels-photo-8327775.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\n  ];\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [images.length]);\n\n  const handleExploreFeatures = () => {\n    history.push(\"/assistant\");\n  };\n\n  return (\n    <React.Fragment>\n      <div\n        className=\"backgroundImage\"\n        style={{ backgroundImage: `url(${images[currentImageIndex]})` }}\n      >\n        <div className=\"title\">\n          <p className=\"header\">ScanVue</p>\n          <p className=\"text\">\n            <span className=\"borderText\">\n              Empowering independence for those who see the world differently.\n            </span>\n          </p>\n        </div>\n        <Link\n          to=\"Features\"\n          activeClass=\"active\"\n          spy={true}\n          smooth={true}\n          offset={-70}\n          duration={500}\n        >\n          <button\n            className=\"btn btn-primary p-3 donateBtn\"\n            onClick={handleExploreFeatures}\n          >\n            Touch for aid\n          </button>\n        </Link>\n      </div>\n\n      <style jsx>{`\n        .backgroundImage {\n          background-size: cover;\n          background-position: center;\n          height: 100vh;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n          color: white;\n          font-family: 'Arial', sans-serif;\n        }\n\n        .title {\n          text-align: center;\n        }\n\n        .header {\n          font-size: 3rem;\n          font-weight: bold;\n          border-bottom: 4px solid white;\n          padding-bottom: 10px;\n          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n        }\n\n        .text {\n          font-size: 1.5rem;\n          margin-top: 1rem;\n        }\n\n        .borderText {\n          text-shadow: 1px 1px 2px black;\n        }\n\n        .donateBtn {\n          margin-top: 2rem;\n        }\n      `}</style>\n    </React.Fragment>\n  );\n};\n\nexport default ImageLanding;\n","import React from \"react\";\n// import nobleCause from \"./assets/nobleCause.jpg\";\nimport styles from \"./styles/nobelCauseComponent.module.css\";\n\nconst NobelCauseComponent = () => {\n  return (\n    <React.Fragment>\n      <div className={`col-12 m-auto ${styles.container}`}>\n{/*         <h1 className={styles.header}>Become a part of noble cause</h1> */}\n        <p className={styles.para}>\n{/*           Lets take pledge to help disabled people and treat them equally */}\n        </p>\n{/*         <img className={styles.image} src={nobleCause} alt=\"noble cause\" /> */}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NobelCauseComponent;\n","// import React from \"react\";\n// import Feature from \"./FeatureBlock\";\n// import ImageLanding from \"./image_landing\";\n// import NobleCause from \"./nobelCause\";\n//\n// const Home = () => {\n//   return (\n//     <React.Fragment>\n//       <ImageLanding />\n//       <section>\n//         <div\n//           className=\"row\"\n//           style={{\n//             textAlign: \"center\",\n//             paddingTop: \"20px\",\n//             background: \"#f5f5f5\",\n//           }}\n//         >\n//           <h2\n//             style={{\n//               fontFamily: \"Georgia, Times, serif\",\n//               fontSize: \"45px\",\n//               fontWeight: \"bolder\",\n//             }}\n//           >\n//             Introduction\n//           </h2>\n//           <div\n//             style={{\n//               padding: 15,\n//               margin: 2,\n//\n//               textAlign: \"center\",\n//             }}\n//           >\n//             The World Health Organization estimates that a staggering 285 million\n//             people globally have visual impairments,with 60 million residing in India alone.\n//             This translates to a significant challenge for these individuals,\n//             as they often struggle to perceive and interact with their surroundings.\n//             My project aims to leverage the power of cutting-edge technologies like Artificial Intelligence,\n//             Machine Learning, and Image and Text Recognition to bridge this gap. By harnessing these advancements,\n//             I hope to empower visually impaired people with a new way to experience their environment.\n//             Ultimately, this project aspires to provide support and assistance to visually impaired individuals,\n//             fostering greater independence and interaction with the world around them.\n//             <span>\n//               {\"   \"}\n// {/*               <button className=\"btn btn-sm btn-info\">For more info...</button> */}\n//             </span>\n//           </div>\n//         </div>\n//       </section>\n//\n//       <section id=\"Features\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           <h2\n//             style={{\n//               fontFamily: \"Georgia, Times, serif\",\n//               fontSize: \"45px\",\n//               fontWeight: \"bolder\",\n//               paddingTop: \"30px\",\n//             }}\n//           >\n//             Features\n//           </h2>\n//\n//           <div\n//             style={{\n//               padding: 12,\n//               margin: 15,\n//               backgroundColor: \"rgba(235, 255, 251, 0.1)\",\n//             }}\n//           >\n//             <div className=\"container\">\n//               <div className=\"row justify-content-md-center\">\n//                 <Feature to=\"/object-detection\" title=\"Object Detection\" />\n//\n//                 <Feature to=\"/face-recognition\" title=\"Face Recognition\" />\n//\n//                 <Feature to=\"/image-to-text\" title=\"Image to text\" />\n//\n//                 <Feature to=\"/text-to-speech\" title=\"Text to speech\" />\n//\n//                 <Feature to=\"/speech-to-text\" title=\"Speech to text\" />\n//\n//                 <Feature to=\"/assistant\" title=\"Assistant\" />\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n//\n//       <NobleCause />\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Home;\n\n\n\n\n\n\n/////////////////////////////////////////////////\n\n\n\n\n\nimport React from \"react\";\nimport Feature from \"./FeatureBlock\";\nimport ImageLanding from \"./image_landing\";\nimport NobleCause from \"./nobelCause\";\n\nconst Home = () => {\n  return (\n    <React.Fragment>\n      <ImageLanding />\n      <section>\n        <div\n          className=\"row\"\n          style={{\n            textAlign: \"center\",\n            paddingTop: \"20px\",\n            background: \"#f5f5f5\",\n            fontFamily: \"Arial, sans-serif\", // Updated font family to Arial\n          }}\n        >\n          <h2\n            style={{\n              fontSize: \"45px\",\n              fontWeight: \"bolder\",\n            }}\n          >\n            Introduction\n          </h2>\n          <div\n            style={{\n              padding: 15,\n              margin: 2,\n              textAlign: \"center\",\n              fontSize: \"16px\", // Updated font size\n              fontFamily: \"Arial, sans-serif\", // Updated font family to Arial\n            }}\n          >\n            The World Health Organization estimates that a staggering 285 million\n            people globally have visual impairments, with 60 million residing in India alone.\n            This translates to a significant challenge for these individuals,\n            as they often struggle to perceive and interact with their surroundings.\n            My project aims to leverage the power of cutting-edge technologies like Artificial Intelligence,\n            Machine Learning, and Image and Text Recognition to bridge this gap. By harnessing these advancements,\n            I hope to empower visually impaired people with a new way to experience their environment.\n            Ultimately, this project aspires to provide support and assistance to visually impaired individuals,\n            fostering greater independence and interaction with the world around them.\n            <span>\n              {/* <button className=\"btn btn-sm btn-info\">For more info...</button> */}\n            </span>\n          </div>\n        </div>\n      </section>\n\n      <section id=\"Features\">\n        <div className=\"row\" style={{ textAlign: \"center\" }}>\n          <h2\n            style={{\n              fontSize: \"45px\",\n              fontWeight: \"bolder\",\n              paddingTop: \"30px\",\n              fontFamily: \"Arial, sans-serif\", // Updated font family to Arial\n            }}\n          >\n            Features\n          </h2>\n\n          <div\n            style={{\n              padding: 12,\n              margin: 15,\n              backgroundColor: \"rgba(235, 255, 251, 0.1)\",\n            }}\n          >\n            <div className=\"container\">\n              <div className=\"row justify-content-md-center\">\n                <Feature to=\"/object-detection\" title=\"Object Detection\" />\n\n                <Feature to=\"/face-recognition\" title=\"Face Recognition\" />\n\n                <Feature to=\"/image-to-text\" title=\"Image to text\" />\n\n                <Feature to=\"/text-to-speech\" title=\"Text to speech\" />\n\n                <Feature to=\"/speech-to-text\" title=\"Speech to text\" />\n\n                <Feature to=\"/assistant\" title=\"Assistant\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <NobleCause />\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","// Footer.jsx\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./styles/footer.module.css\";\n\nconst Footer = () => {\n  return (\n    <footer className={`mb-0 p-4 ${styles.footer}`}>\n      <div className=\"row\"></div>\n\n      <div className={`${styles.footerBottom}`}>\n        <Link to=\"/\">\n          {/* <p style={{ textAlign: \"center\" }}>Adarsh Raveendran</p> */}\n        </Link>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n\n","import React from \"react\";\n\nconst Aboutus = () => {\n  const centerStyle = {\n    background: \"linear-gradient(135deg, #2d75ff, #a8bfff)\", // Blue gradient background\n    height: \"100vh\", // Set height to cover the entire viewport\n    display: \"flex\", // Align content in the center\n    justifyContent: \"center\", // Center horizontally\n    alignItems: \"center\", // Center vertically\n    textAlign: \"center\", // Center text\n  };\n\n  const h1Style = {\n    color: \"#004438\", // Deep peacock blue color\n    background: \"linear-gradient(45deg, #004438, #028090)\", // Gradient effect for text\n    WebkitBackgroundClip: \"text\", // Clip text to apply gradient effect\n    WebkitTextFillColor: \"transparent\", // Make text transparent\n    fontWeight: \"bold\", // Make text bold\n  };\n\n  return (\n    <div style={centerStyle}>\n      <div>\n        <h1 style={h1Style}>Adarsh Raveendran</h1>\n        <h3> \"This project is dedicated to helping people who are visually impaired\" </h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Aboutus;\n","import React, { Component } from \"react\";\n\nexport default class CameraFeed extends Component {\n  processDevices(devices) {\n    devices.forEach((device) => {\n      console.log(device.label);\n      if (device.kind === \"videoinput\") this.setVideoDevice(device);\n    });\n  }\n\n  async setVideoDevice(device) {\n    const { deviceId } = device;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: { deviceId },\n    });\n    console.log(\"stream\", stream);\n    if (this.videoPlayer && stream !== null)\n      this.videoPlayer.srcObject = stream;\n    this.videoPlayer?.play();\n  }\n\n  async componentDidMount() {\n    const allDevices = await navigator.mediaDevices.enumerateDevices();\n    console.log(\"allDevices\", allDevices);\n    this.processDevices(allDevices);\n  }\n  async componentWillUnmount() {\n    if (this.videoPlayer && this.videoPlayer.srcObject)\n      this.videoPlayer.srcObject.getTracks().forEach(function (track) {\n        console.log(\"trabck\", track);\n        if (track.readyState === \"live\" && track.kind === \"video\") {\n          track.stop();\n        }\n      });\n  }\n\n  takePhoto = () => {\n    const { sendFile } = this.props;\n    const context = this.canvas.getContext(\"2d\");\n    context.drawImage(this.videoPlayer, 0, 0, 680, 360);\n    this.canvas.toBlob(sendFile);\n    this.props.closeWindow();\n  };\n\n  render() {\n    return (\n      <div className=\"c-camera-feed\">\n        <div className=\"c-camera-feed__viewer\">\n          <video\n            style={{ maxWidth: \"100%\" }}\n            ref={(ref) => {\n              console.log(\"videoref\", ref);\n              if (ref) this.videoPlayer = ref;\n            }}\n            width=\"680\"\n            heigh=\"360\"\n          />\n        </div>\n        <button className=\"btn btn-lg btn-primary\" onClick={this.takePhoto}>\n          Capture Image\n        </button>\n        <div className=\"c-camera-feed__stage\" style={{ display: \"none\" }}>\n          <canvas width=\"680\" height=\"360\" ref={(ref) => (this.canvas = ref)} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Camera from \"./camera\";\nimport styles from \"./styles/cameraWindow.module.css\";\n\nconst CameraWindow = (props) => {\n  return (\n    <React.Fragment>\n      <div className={`${styles.win}`}>\n        <div className={`${styles.content}`}>\n          <h3 className=\"display-5\">Camera</h3>\n          <p>Please capture image using webcam/camera of your device</p>\n          <button className={styles.cross} onClick={() => props.closeWindow()}>\n            &#10060;\n          </button>\n          <Camera {...props} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CameraWindow;\n","import React, { useState } from \"react\";\nimport Camera from \"./cameraWindow\";\n\nconst Util = (props) => {\n  const [showCamera, setShowCamera] = useState(false);\n  const closeWindow = () => {\n    setShowCamera(false);\n  };\n  return (\n    <React.Fragment>\n      <button\n        className=\"btn btn-light btn-outline-secondary w-100 \"\n        onClick={() => {\n          setShowCamera(true);\n        }}\n      >\n        Capture Photo\n      </button>\n      {showCamera && <Camera closeWindow={closeWindow} {...props} />}\n    </React.Fragment>\n  );\n};\n\nexport default Util;\n","import React, { useState } from \"react\";\nimport Camera from \"./camerautil\";\n\nconst FileUpload = (props) => {\n  // let uploadInput = \"\";\n\n  const [preview, setPreview] = useState();\n  const [uploadImage, setUploadImage] = useState();\n  const handleUploadImage = () => {\n    const data = new FormData();\n    console.log(\"============here===========\");\n    data.append(\"file\", uploadImage);\n    // data.append(\"file\", uploadInput.files[0]);\n    // data.append(\"filename\", this.fileName.value);\n    fetch(props.url, {\n      method: \"POST\",\n      body: data,\n    })\n      .then((response) => {\n        response.json().then((body) => {\n          props.setImageOutputUrl(\n            `http://localhost:5000/display/${body.dataOutput}?${Date.now()}`\n          );\n          props.setImageInputUrl(\n            `http://localhost:5000/display/${body.dataInput}?${Date.now()}`\n          );\n          props.setText(body.text);\n          props.speak(body.text);\n          setPreview(undefined);\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const onSelectFile = (e) => {\n    if (!e.target.files || e.target.files.length === 0) {\n      setPreview(undefined);\n      return;\n    }\n    setUploadImage(e.target.files[0]);\n    const objectUrl = URL.createObjectURL(e.target.files[0]);\n    setPreview(objectUrl);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"container \">\n        <form\n          onSubmit={(ev) => {\n            ev.preventDefault();\n          }}\n        >\n          <p className=\"text-center\">\n            Please select any file or capture photo from webcam/camera.\n          </p>\n          <div className=\"row\">\n            <div\n              className=\"col-6 p-4\"\n              style={{\n                border: \"4px solid #f8f9fa\",\n                borderRight: \"2px solid rgba(126, 1188, 159,1) \",\n              }}\n            >\n              <input\n                // ref={(ref) => {\n                //   uploadInput = ref;\n                // }}\n                className=\"form-control btn-outline-secondary\"\n                type=\"file\"\n                onChange={onSelectFile}\n              />\n            </div>\n            {/* <div>\n          <input\n            ref={(ref) => {\n              this.fileName = ref;\n            }}\n            type=\"text\"\n            placeholder=\"Enter the desired name of file\"\n          />\n        </div> */}\n            <br />\n            <div\n              className=\"col-6 p-4\"\n              style={{\n                border: \"4px solid #f8f9fa\",\n                borderLeft: \"2px solid rgba(126, 1188, 159,1) \",\n              }}\n            >\n              <Camera\n                sendFile={async (file) => {\n                  // var uploadInput = file;\n                  const objectUrl = URL.createObjectURL(file);\n                  setPreview(objectUrl);\n                  setUploadImage(file);\n                  console.log(\"camera\");\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"row px-4 m-2 mx-5\">\n            <button\n              className=\"btn btn-success\"\n              disabled={!preview}\n              onClick={() => handleUploadImage()}\n            >\n              Upload\n            </button>\n          </div>\n        </form>\n      </div>\n      {preview && (\n        <div\n          style={{\n            border: \"4px solid #f8f9fa\",\n            padding: \"10px\",\n            margin: \"10px\",\n            textAlign: \"center\",\n          }}\n        >\n          <h3 className=\"display-5\">Preview</h3>\n          <img style={{ maxWidth: \"50%\" }} src={preview} alt=\"Uploaded\" />\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default FileUpload;\n","// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ObjectDetection = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const [map, setMap] = useState({});\n//   const { speak, cancel } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     var M = {};\n//     for (var i = 0; i < text.length; i++) {\n//       if (!M[text[i]]) M[text[i]] = 1;\n//       else M[text[i]] = M[text[i]] + 1;\n//     }\n//     var xx = \"\";\n//     for (let i = 0; i < Object.keys(M).length; i++) {\n//       if (M[Object.keys(M)[i]])\n//         xx = xx + M[Object.keys(M)[i]] + \" \" + Object.keys(M)[i] + \", \";\n//     }\n//\n//     setMap(M);\n//\n//     console.log(xx);\n//     speak({ text: `This Image contains: ${xx}` });\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           ObjectDetection\n//         </h1>\n//       </div>\n//       <FileUpload\n//         setImageInputUrl={setImageInputUrl}\n//         setImageOutputUrl={setImageOutputUrl}\n//         setText={setText}\n//         speak={speakOutput}\n//         url={\"http://localhost:5000//object-recognition\"}\n//       />\n//       <div className=\"container border my-5\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           {imageInputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Input Image</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageInputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//           {imageOutputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Result</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageOutputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {text && (\n//           <div\n//             className=\"row\"\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\n//           >\n//             <hr />\n//             <h1>Image Contains:</h1>\n//             <hr />\n//             <div\n//               className=\"p-5 m-5\"\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\n//             >\n//               {Object.keys(map).map((key) => (\n//                 <h5 key={key}>{`${key}: ${map[key]}`}</h5>\n//               ))}\n//             </div>\n//             <button\n//               className=\"btn btn-success m-2 p-2\"\n//               type=\"button\"\n//               onClick={() => speak({ text: `This Image contains: ${text}` })}\n//             >\n//               Speak\n//             </button>\n//             <button\n//               className=\"btn btn-secondary m-2 p-2\"\n//               type=\"button\"\n//               onClick={cancel}\n//             >\n//               Stop\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default ObjectDetection;\n\n\n\n\n\n///////////////////////////////////////////////////////////\n\n\n\n\n\n\nimport React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst ObjectDetection = () => {\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [map, setMap] = useState({});\n  const { speak, cancel } = useSpeechSynthesis();\n\n  const speakOutput = (text) => {\n    var M = {};\n    for (var i = 0; i < text.length; i++) {\n      if (!M[text[i]]) M[text[i]] = 1;\n      else M[text[i]] = M[text[i]] + 1;\n    }\n    var sortedKeys = Object.keys(M).sort();\n    var speechText = sortedKeys\n      .map((key) => `${M[key]} ${key}`)\n      .join(\", \")\n      .replace(/, ([^,]*)$/, ' and $1');\n\n    setMap(M);\n\n    speak({ text: `This Image contains: ${speechText}` });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"phone-container\">\n        <div className=\"phone\" style={{ width: \"85%\", height: \"95%\" }}>\n          <div className=\"phone-screen\">\n            <div className=\"assistant-container\">\n              <div className=\"assistant-content\">\n                <div className=\"assistant-title\">\n                  <h1 style={{ textShadow: \"1px 1px 2px #000\", color: \"#003366\" }}>Object Detection</h1>\n                </div>\n                <div className=\"assistant-body\">\n                  <FileUpload\n                    setImageInputUrl={setImageInputUrl}\n                    setImageOutputUrl={setImageOutputUrl}\n                    setText={setText}\n                    speak={speakOutput}\n                    url={\"http://localhost:5000/object-recognition\"}\n                  />\n                  <div className=\"image-container\">\n                    {imageInputURL && (\n                      <div className=\"input-image\">\n                        <h3>Input Image</h3>\n                        <img src={imageInputURL} alt=\"Input\" />\n                      </div>\n                    )}\n                    {imageOutputURL && (\n                      <div className=\"output-image\">\n                        <h3>Result</h3>\n                        <img src={imageOutputURL} alt=\"Output\" />\n                      </div>\n                    )}\n                  </div>\n                  {text && (\n                    <div className=\"result\">\n                      <h3>Object Identification:</h3>\n                      <div className=\"text-area\">\n                        <div className=\"buttons\">\n                          <button\n                            className=\"speak-button\"\n                            onClick={() => speakOutput(text)}\n                          >\n                            Speak\n                          </button>\n                          <button className=\"stop-button\" onClick={cancel}>\n                            Stop\n                          </button>\n                        </div>\n                        <div className=\"text\">\n                          <ul className=\"transcription-list\">\n                            {Object.keys(map)\n                              .sort()\n                              .map((key) => (\n                                <li key={key}>{`${map[key]} ${key},`}</li>\n                              ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        /* Styles go here */\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%;\n          height: 95%;\n          max-width: 750px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n          display: flex;\n          flex-direction: column;\n        }\n        .phone-screen {\n          flex: 1;\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          overflow-y: auto;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .image-container {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n        }\n        .input-image,\n        .output-image {\n          flex: 1;\n          text-align: center;\n        }\n        .input-image img,\n        .output-image img {\n          width: 100%;\n          border: 4px solid #d2d2d2;\n          border-radius: 5px;\n        }\n        .result {\n          margin-top: 30px;\n          border-top: 2px solid gray;\n          padding-top: 20px;\n        }\n        .text-area {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        .text {\n          background: rgba(235, 255, 251, 0.8);\n          width: 85%;\n          padding: 20px;\n          border-radius: 5px;\n          margin-bottom: 10px;\n          overflow-y: auto;\n          max-height: 200px;\n        }\n        .transcription-list {\n          padding: 0;\n          margin: 0;\n          list-style-type: none;\n        }\n        .transcription-list li {\n          margin-bottom: 5px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: space-between;\n        }\n        .speak-button,\n        .copy-button,\n        .stop-button {\n          padding: 8px 16px;\n          font-size: 14px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .copy-button:hover {\n          background-color: #2196f3;\n        }\n        .stop-button {\n          background-color: #f44336;\n        }\n      `}</style>\n    </React.Fragment>\n  );\n};\n\nexport default ObjectDetection;\n\n","// import React, { useState } from \"react\";\r\n// import FileUpload from \"./FileUpload\";\r\n// import { useSpeechSynthesis } from \"react-speech-kit\";\r\n//\r\n// const FaceRecognition = () => {\r\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\r\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\r\n//   const [text, setText] = useState(\"\");\r\n//   const [map, setMap] = useState({});\r\n//   const { speak, cancel } = useSpeechSynthesis();\r\n//\r\n//   const speakOutput = (text) => {\r\n//     var M = {};\r\n//     for (var i = 0; i < text.length; i++) {\r\n//       if (!M[text[i]]) M[text[i]] = 1;\r\n//       else M[text[i]] = M[text[i]] + 1;\r\n//     }\r\n//     var xx = \"\";\r\n//     for (let i = 0; i < Object.keys(M).length; i++) {\r\n//       if (M[Object.keys(M)[i]])\r\n//         xx = xx + M[Object.keys(M)[i]] + \" \" + Object.keys(M)[i] + \", \";\r\n//     }\r\n//\r\n//     setMap(M);\r\n//\r\n//     console.log(xx);\r\n//     speak({ text: `This Image contains: ${xx}` });\r\n//   };\r\n//\r\n//   return (\r\n//     <React.Fragment>\r\n//       <div\r\n//         className=\"row m-2 p-4\"\r\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\r\n//       >\r\n//         <h1\r\n//           style={{\r\n//             fontFamily: \"Georgia, Times, serif\",\r\n//             fontSize: \"45px\",\r\n//             fontWeight: \"bolder\",\r\n//           }}\r\n//         >\r\n//           FaceRecognition\r\n//         </h1>\r\n//       </div>\r\n//       <FileUpload\r\n//         setImageInputUrl={setImageInputUrl}\r\n//         setImageOutputUrl={setImageOutputUrl}\r\n//         setText={setText}\r\n//         speak={speakOutput}\r\n//         url={\"http://localhost:5000//face-recognition\"}\r\n//       />\r\n//       <div className=\"container border my-5\">\r\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n//           {imageInputURL && (\r\n//             <div className=\"col-6 p-2\">\r\n//               <h3 className=\"display-5\">Input Image</h3>\r\n//               <img\r\n//                 style={{\r\n//                   width: \"100%\",\r\n//                   border: \"4px solid #d2d2d2\",\r\n//                   borderRadius: \"5px\",\r\n//                 }}\r\n//                 src={imageInputURL}\r\n//                 alt=\"img\"\r\n//               />\r\n//             </div>\r\n//           )}\r\n//           {imageOutputURL && (\r\n//             <div className=\"col-6 p-2\">\r\n//               <h3 className=\"display-5\">Result</h3>\r\n//               <img\r\n//                 style={{\r\n//                   width: \"100%\",\r\n//                   border: \"4px solid #d2d2d2\",\r\n//                   borderRadius: \"5px\",\r\n//                 }}\r\n//                 src={imageOutputURL}\r\n//                 alt=\"img\"\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         {text && (\r\n//           <div\r\n//             className=\"row\"\r\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\r\n//           >\r\n//             <hr />\r\n//             <h1>Image Contains:</h1>\r\n//             <hr />\r\n//             <div\r\n//               className=\"p-5 m-5\"\r\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\r\n//             >\r\n//               {Object.keys(map).map((key) => (\r\n//                 <h5 key={key}>{`${key}: ${map[key]}`}</h5>\r\n//               ))}\r\n//             </div>\r\n//             <button\r\n//               className=\"btn btn-success m-2 p-2\"\r\n//               type=\"button\"\r\n//               onClick={() => speak({ text: `This Image contains: ${text}` })}\r\n//             >\r\n//               Speak\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary m-2 p-2\"\r\n//               type=\"button\"\r\n//               onClick={cancel}\r\n//             >\r\n//               Stop\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n//\r\n// export default FaceRecognition;\r\n\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport FileUpload from \"./FileUpload\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nconst FaceRecognition = () => {\r\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\r\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [map, setMap] = useState({});\r\n  const { speak, cancel } = useSpeechSynthesis();\r\n\r\n  const speakOutput = (text) => {\r\n    const M = {};\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (!M[text[i]]) M[text[i]] = 1;\r\n      else M[text[i]] = M[text[i]] + 1;\r\n    }\r\n    let names = Object.keys(M);\r\n\r\n    if (names.length === 0) {\r\n      speak({ text: \"No faces detected\" });\r\n      return;\r\n    }\r\n\r\n    let nameList = names.join(\", \");\r\n\r\n    setMap(M);\r\n\r\n    speak({ text: `This Image contains: ${nameList}` });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"phone-container\">\r\n        <div className=\"phone\" style={{ width: \"85%\", height: \"95%\" }}>\r\n          <div className=\"phone-screen\">\r\n            <div className=\"assistant-container\">\r\n              <div className=\"assistant-content\">\r\n                <div className=\"assistant-title\">\r\n                  <h1 style={{ textShadow: \"1px 1px 2px #000\", color: \"#003366\" }}>\r\n                    Face Recognition\r\n                  </h1>\r\n                </div>\r\n                <div className=\"assistant-body\">\r\n                  <FileUpload\r\n                    setImageInputUrl={setImageInputUrl}\r\n                    setImageOutputUrl={setImageOutputUrl}\r\n                    setText={setText}\r\n                    speak={speakOutput}\r\n                    url={\"http://localhost:5000/face-recognition\"}\r\n                  />\r\n                  <div className=\"image-container\">\r\n                    {imageInputURL && (\r\n                      <div className=\"input-image\">\r\n                        <h3>Input Image</h3>\r\n                        <img src={imageInputURL} alt=\"Input\" />\r\n                      </div>\r\n                    )}\r\n                    {imageOutputURL && (\r\n                      <div className=\"output-image\">\r\n                        <h3>Result</h3>\r\n                        <img src={imageOutputURL} alt=\"Output\" />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {text && (\r\n                    <div className=\"result\">\r\n                      <h3>Face Identification:</h3>\r\n                      <div className=\"text-area\">\r\n                        <div className=\"buttons\">\r\n                          <button className=\"speak-button\" onClick={() => speakOutput(text)}>\r\n                            Speak\r\n                          </button>\r\n                          <button className=\"stop-button\" onClick={cancel}>\r\n                            Stop\r\n                          </button>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                          <ul className=\"transcription-list\">\r\n                            {Object.keys(map)\r\n                              .sort()\r\n                              .map((key) => (\r\n                                <li key={key}>{key}</li>\r\n                              ))}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <style jsx>{`\r\n        /* Styles go here */\r\n        .phone-container {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          height: 100vh;\r\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\r\n        }\r\n        .phone {\r\n          width: 85%;\r\n          height: 95%;\r\n          max-width: 750px;\r\n          background: #333;\r\n          border-radius: 20px;\r\n          overflow: hidden;\r\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n          display: flex;\r\n          flex-direction: column;\r\n        }\r\n        .phone-screen {\r\n          flex: 1;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: #fff;\r\n          padding: 20px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: center;\r\n          align-items: center;\r\n          overflow-y: auto;\r\n        }\r\n        .assistant-container {\r\n          width: 100%;\r\n          max-width: 400px;\r\n        }\r\n        .assistant-content {\r\n          text-align: center;\r\n        }\r\n        .assistant-title {\r\n          font-size: 28px;\r\n          margin-bottom: 20px;\r\n        }\r\n        .assistant-body {\r\n          margin-top: 20px;\r\n        }\r\n        .image-container {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          margin-bottom: 20px;\r\n        }\r\n        .input-image,\r\n        .output-image {\r\n          flex: 1;\r\n          text-align: center;\r\n        }\r\n        .input-image img,\r\n        .output-image img {\r\n          width: 100%;\r\n          border: 4px solid #d2d2d2;\r\n          border-radius: 5px;\r\n        }\r\n        .result {\r\n          margin-top: 30px;\r\n          border-top: 2px solid gray;\r\n          padding-top: 20px;\r\n        }\r\n        .text-area {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n        }\r\n        .text {\r\n          background: rgba(235, 255, 251, 0.8);\r\n          width: 85%;\r\n          padding: 20px;\r\n          border-radius: 5px;\r\n          margin-bottom: 10px;\r\n          overflow-y: auto;\r\n          max-height: 200px;\r\n        }\r\n        .transcription-list {\r\n          padding: 0;\r\n          margin: 0;\r\n          list-style-type: none;\r\n        }\r\n        .transcription-list li {\r\n          margin-bottom: 5px;\r\n        }\r\n        .buttons {\r\n          display: flex;\r\n          justify-content: space-between;\r\n        }\r\n        .speak-button,\r\n        .copy-button,\r\n        .stop-button {\r\n          padding: 8px 16px;\r\n          font-size: 14px;\r\n          border: none;\r\n          border-radius: 5px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s ease;\r\n        }\r\n        .speak-button:hover {\r\n          background-color: #4caf50;\r\n        }\r\n        .copy-button:hover {\r\n          background-color: #2196f3;\r\n        }\r\n        .stop-button {\r\n          background-color: #f44336;\r\n        }\r\n      `}</style>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FaceRecognition;\r\n\r\n","// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   // speak({ text: \"hi\" });\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Image To Text\n//         </h1>\n//       </div>\n//       <FileUpload\n//         setImageInputUrl={setImageInputUrl}\n//         setImageOutputUrl={setImageOutputUrl}\n//         setText={setText}\n//         speak={speakOutput}\n//         url={\"http://localhost:5000/image-to-text\"}\n//       />\n//       <div className=\"container border my-5\">\n//         <div className=\"row\" style={{ textAlign: \"center\" }}>\n//           {imageInputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Input Image</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageInputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//           {imageOutputURL && (\n//             <div className=\"col-6 p-2\">\n//               <h3 className=\"display-5\">Result</h3>\n//               <img\n//                 style={{\n//                   width: \"100%\",\n//                   border: \"4px solid #d2d2d2\",\n//                   borderRadius: \"5px\",\n//                 }}\n//                 src={imageOutputURL}\n//                 alt=\"img\"\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {text && (\n//           <div\n//             className=\"row\"\n//             style={{ marginTop: \"30px\", borderTop: \"2px solid gray\" }}\n//           >\n//             <hr />\n//             <h1>\n//               Image Contains:\n//               {speaking ? (\n//                 <button\n//                   className=\"btn btn-secondary m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={cancel}\n//                 >\n//                   Stop\n//                 </button>\n//               ) : (\n//                 <button\n//                   className=\"btn btn-success m-2 p-2\"\n//                   type=\"button\"\n//                   onClick={() => speak({ text })}\n//                 >\n//                   Speak\n//                 </button>\n//               )}\n//             </h1>\n//             <hr />\n//             <div\n//               className=\"p-5 m-5\"\n//               style={{ background: \"rgba(235, 255, 251, 0.8)\", width: \"85%\" }}\n//             >\n//               <h5>{text}</h5>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default ImageToText;\n\n\n\n\n\n\n\n\n\n////////////////////////////////////////////////////\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import FileUpload from \"./FileUpload\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const ImageToText = () => {\n//   const [imageInputURL, setImageInputUrl] = useState(\"\");\n//   const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n//   const [text, setText] = useState(\"\");\n//   const { speak, cancel, speaking } = useSpeechSynthesis();\n//\n//   const speakOutput = (text) => {\n//     speak({ text: `This Image contains: ${text}` });\n//   };\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\" style={{ width: \"85%\" }}> {/* Increase width by 25% */}\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Image To Text</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <FileUpload\n//                   setImageInputUrl={setImageInputUrl}\n//                   setImageOutputUrl={setImageOutputUrl}\n//                   setText={setText}\n//                   speak={speakOutput}\n//                   url={\"http://localhost:5000/image-to-text\"}\n//                 />\n//                 {imageInputURL && (\n//                   <div className=\"input-image\">\n//                     <h3>Input Image</h3>\n//                     <img src={imageInputURL} alt=\"Input\" />\n//                   </div>\n//                 )}\n//                 {imageOutputURL && (\n//                   <div className=\"output-image\">\n//                     <h3>Result</h3>\n//                     <img src={imageOutputURL} alt=\"Output\" />\n//                   </div>\n//                 )}\n//                 {text && (\n//                   <div className=\"result\">\n//                     <h3>Image Contains:</h3>\n//                     <div className=\"text-area\">\n//                       <div className=\"text\">{text}</div>\n//                       {speaking ? (\n//                         <button className=\"stop-button\" onClick={cancel}>\n//                           Stop\n//                         </button>\n//                       ) : (\n//                         <button className=\"speak-button\" onClick={() => speak({ text })}>\n//                           Speak\n//                         </button>\n//                       )}\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 85%; /* Increase width by 25% */\n//           height: 90%; /* Adjust as needed */\n//           max-width: 750px; /* Set maximum width */\n//           max-height: 800px; /* Set maximum height */\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .input-image,\n//         .output-image {\n//           margin-top: 20px;\n//           text-align: center;\n//         }\n//         .input-image img,\n//         .output-image img {\n//           width: 100%;\n//           border: 4px solid #d2d2d2;\n//           border-radius: 5px;\n//         }\n//         .result {\n//           margin-top: 30px;\n//           border-top: 2px solid gray;\n//           padding-top: 20px;\n//         }\n//         .text-area {\n//           display: flex;\n//           align-items: center;\n//           justify-content: space-between;\n//           margin-top: 20px;\n//         }\n//         .text {\n//           background: rgba(235, 255, 251, 0.8);\n//           width: 85%;\n//           padding: 20px;\n//           border-radius: 5px;\n//         }\n//         .speak-button,\n//         .stop-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .stop-button {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default ImageToText;\n\n\n\n\n\n//////////////////////////////////////////////////////\n\n\n\n\n\nimport React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst ImageToText = () => {\n  const [imageInputURL, setImageInputUrl] = useState(\"\");\n  const [imageOutputURL, setImageOutputUrl] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const { speak, cancel, speaking } = useSpeechSynthesis();\n\n  const speakOutput = (text) => {\n    speak({ text: `This Image contains: ${text}` });\n  };\n\n  const handleCopyText = () => {\n    // Copy text to clipboard\n    navigator.clipboard.writeText(text);\n    // Optionally provide user feedback\n    alert(\"Transcript copied to clipboard!\");\n  };\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\" style={{ width: \"85%\", height: \"95%\" }}>\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1 style={{ color: \"#004438\", textShadow: \"1px 1px 2px #000000\" }}>Image To Text</h1>\n              </div>\n              <div className=\"assistant-body\">\n                <FileUpload\n                  setImageInputUrl={setImageInputUrl}\n                  setImageOutputUrl={setImageOutputUrl}\n                  setText={setText}\n                  speak={speakOutput}\n                  url={\"http://localhost:5000/image-to-text\"}\n                />\n                <div className=\"image-container\">\n                  {imageInputURL && (\n                    <div className=\"input-image\">\n                      <h3>Input Image</h3>\n                      <img src={imageInputURL} alt=\"Input\" />\n                    </div>\n                  )}\n                  {imageOutputURL && (\n                    <div className=\"output-image\">\n                      <h3>Result</h3>\n                      <img src={imageOutputURL} alt=\"Output\" />\n                    </div>\n                  )}\n                </div>\n                {text && (\n                  <div className=\"result\">\n                    <h3>Transcription:</h3>\n                    <div className=\"text-area\">\n                      <div className=\"buttons\">\n                        {speaking ? (\n                          <button className=\"stop-button\" onClick={cancel}>\n                            Stop Speaking\n                          </button>\n                        ) : (\n                          <button className=\"speak-button\" onClick={() => speak({ text })}>\n                            Speak Transcript\n                          </button>\n                        )}\n                        <button className=\"copy-button\" onClick={handleCopyText}>\n                          Copy Transcript\n                        </button>\n                      </div>\n                      <div className=\"text\">{text}</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        /* Styles go here */\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%;\n          height: 95%;\n          max-width: 750px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .image-container {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n        }\n        .input-image,\n        .output-image {\n          flex: 1;\n          text-align: center;\n        }\n        .input-image img,\n        .output-image img {\n          width: 100%;\n          border: 4px solid #d2d2d2;\n          border-radius: 5px;\n        }\n        .result {\n          margin-top: 30px;\n          border-top: 2px solid gray;\n          padding-top: 20px;\n        }\n        .text-area {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        .text {\n          background: rgba(235, 255, 251, 0.8);\n          width: 85%;\n          padding: 20px;\n          border-radius: 5px;\n          margin-bottom: 10px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: space-between;\n        }\n        .speak-button,\n        .copy-button,\n        .stop-button {\n          padding: 8px 16px;\n          font-size: 14px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .copy-button:hover {\n          background-color: #2196f3;\n        }\n        .stop-button {\n          background-color: #f44336;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ImageToText;\n","// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   const styleFlexRow = { display: \"flex\", flexDirection: \"row\" };\n//   const styleContainerRatePitch = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     marginBottom: 12,\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Text to Speech\n//         </h1>\n//       </div>\n//       <form>\n//         {!supported && (\n//           <p>\n//             Oh no, it looks like your browser doesn&#39;t support Speech\n//             Synthesis.\n//           </p>\n//         )}\n//         {supported && (\n//           <React.Fragment>\n//             <div className=\"column\">\n//               <div className=\"row m-2 p-2\" style={{ textAlign: \"center\" }}>\n//                 <p>\n//                   {`Type a message below then click 'Speak'\n//                 and SpeechSynthesis will read it out.`}\n//                 </p>\n//                 <div style={{ display: \"none\" }}>\n//                   <label htmlFor=\"voice\">Voice</label>\n//                   <select\n//                     id=\"voice\"\n//                     name=\"voice\"\n//                     value={voiceIndex || \"\"}\n//                     onChange={(event) => {\n//                       setVoiceIndex(event.target.value);\n//                     }}\n//                   >\n//                     <option value=\"\">Default</option>\n//                     {voices.map((option, index) => (\n//                       <option key={option.voiceURI} value={index}>\n//                         {`${option.lang} - ${option.name}`}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"col-9 row\">\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"rate\">Rate: </label>\n//                       <div className=\"rate-value\">{rate}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0.5\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"rate\"\n//                       onChange={(event) => {\n//                         setRate(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                   <div className=\"col-6 px-5\" style={styleContainerRatePitch}>\n//                     <div style={styleFlexRow}>\n//                       <label htmlFor=\"pitch\">Pitch: </label>\n//                       <div className=\"pitch-value\">{pitch}</div>\n//                     </div>\n//                     <input\n//                       type=\"range\"\n//                       min=\"0\"\n//                       max=\"2\"\n//                       defaultValue=\"1\"\n//                       step=\"0.1\"\n//                       id=\"pitch\"\n//                       onChange={(event) => {\n//                         setPitch(event.target.value);\n//                       }}\n//                     />\n//                   </div>\n//                 </div>\n//                 <div\n//                   className=\"col-9\"\n//                   style={{\n//                     border: \"4px solid #f8f9fa\",\n//                     backgroundColor: \"#f8f9fa\",\n//                   }}\n//                 >\n//                   <label htmlFor=\"message\">Message</label>\n//                   <br />\n//                   <textarea\n//                     style={{\n//                       width: \"100%\",\n//                       minHeight: \"150px\",\n//                       fontSize: \"17px\",\n//                       backgroundColor: \"#f8f9fa\",\n//                     }}\n//                     id=\"message\"\n//                     name=\"message\"\n//                     placeholder=\"Please type message you want to make speek it out.\"\n//                     rows={3}\n//                     value={text}\n//                     onChange={(event) => {\n//                       setText(event.target.value);\n//                     }}\n//                   />\n//                 </div>\n//                 <div className=\"col-3\">\n//                   {speaking ? (\n//                     <button\n//                       className=\"btn btn-secondary m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={cancel}\n//                     >\n//                       Stop\n//                     </button>\n//                   ) : (\n//                     <button\n//                       className=\"btn btn-success m-2 p-2\"\n//                       style={{ width: \"100%\", height: \"90%\" }}\n//                       type=\"button\"\n//                       onClick={() => speak({ text, voice, rate, pitch })}\n//                     >\n//                       Speak\n//                     </button>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         )}\n//       </form>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n\n/////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const TextToSpeech = () => {\n//   const [text, setText] = useState(\"\");\n//   const [pitch, setPitch] = useState(1);\n//   const [rate, setRate] = useState(1);\n//   const [voiceIndex, setVoiceIndex] = useState(null);\n//   const onEnd = () => {\n//     // You could do something here after speaking has finished\n//   };\n//   const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n//     onEnd,\n//   });\n//\n//   const voice = voices[voiceIndex] || null;\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Text to Speech</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 {!supported && (\n//                   <p>\n//                     Oh no, it looks like your browser doesn&#39;t support\n//                     Speech Synthesis.\n//                   </p>\n//                 )}\n//                 {supported && (\n//                   <React.Fragment>\n//                     <div className=\"settings-container\">\n//                       <div className=\"voice-select\">\n//                         <label htmlFor=\"voice\">Voice:</label>\n//                         <select\n//                           id=\"voice\"\n//                           name=\"voice\"\n//                           value={voiceIndex || \"\"}\n//                           onChange={(event) => {\n//                             setVoiceIndex(event.target.value);\n//                           }}\n//                           style={{ maxWidth: \"100%\" }}\n//                         >\n//                           <option value=\"\">Default</option>\n//                           {voices.map((option, index) => (\n//                             <option key={option.voiceURI} value={index}>\n//                               {`${option.lang} - ${option.name}`}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"rate-pitch-sliders\">\n//                         <div className=\"rate-slider\">\n//                           <label htmlFor=\"rate\">Rate:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0.5\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={rate}\n//                             onChange={(event) => setRate(event.target.value)}\n//                           />\n//                           <span>{rate}</span>\n//                         </div>\n//                         <div className=\"pitch-slider\">\n//                           <label htmlFor=\"pitch\">Pitch:</label>\n//                           <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max=\"2\"\n//                             step=\"0.1\"\n//                             value={pitch}\n//                             onChange={(event) => setPitch(event.target.value)}\n//                           />\n//                           <span>{pitch}</span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"text-area\">\n//                       <label htmlFor=\"message\">Message:</label>\n//                       <textarea\n//                         id=\"message\"\n//                         name=\"message\"\n//                         placeholder=\"Please type the message you want to speak out.\"\n//                         value={text}\n//                         onChange={(event) => setText(event.target.value)}\n//                       />\n//                     </div>\n//                     <div className=\"button-container\">\n//                       <button\n//                         className={`speak-button ${\n//                           speaking ? \"speaking\" : \"\"\n//                         }`}\n//                         onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n//                       >\n//                         {speaking ? \"Stop\" : \"Speak\"}\n//                       </button>\n//                     </div>\n//                   </React.Fragment>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//         .phone {\n//           width: 300px;\n//           height: 500px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           width: 100%;\n//           height: 100%;\n//           background: #fff;\n//           padding: 20px;\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//         }\n//         .settings-container {\n//           margin-bottom: 20px;\n//         }\n//         .voice-select {\n//           margin-bottom: 10px;\n//         }\n//         .rate-pitch-sliders {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 20px;\n//         }\n//         .rate-slider,\n//         .pitch-slider {\n//           width: 45%;\n//         }\n//         .rate-slider span,\n//         .pitch-slider span {\n//           margin-left: 10px;\n//         }\n//         .text-area {\n//           margin-bottom: 20px;\n//         }\n//         .text-area textarea {\n//           width: 100%;\n//           height: 100px;\n//           resize: none;\n//           padding: 10px;\n//           font-size: 16px;\n//           border-radius: 5px;\n//           border: 1px solid #ccc;\n//         }\n//         .button-container {\n//           display: flex;\n//           justify-content: center;\n//         }\n//         .speak-button {\n//           padding: 10px 20px;\n//           font-size: 16px;\n//           border: none;\n//           border-radius: 5px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .speak-button:hover {\n//           background-color: #4caf50;\n//         }\n//         .speak-button.speaking {\n//           background-color: #f44336;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default TextToSpeech;\n\n\n//////////////////////////////////////////////////////////////\n\n\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst TextToSpeech = () => {\n  const [text, setText] = useState(\"\");\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const onEnd = () => {\n    // You could do something here after speaking has finished\n  };\n  const { speak, cancel, speaking, supported, voices } = useSpeechSynthesis({\n    onEnd,\n  });\n\n  const voice = voices[voiceIndex] || null;\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1 className=\"title\">Text to Speech</h1>\n              </div>\n              <div className=\"assistant-body\">\n                {!supported && (\n                  <p>\n                    Oh no, it looks like your browser doesn&#39;t support\n                    Speech Synthesis.\n                  </p>\n                )}\n                {supported && (\n                  <React.Fragment>\n                    <div className=\"settings-container\">\n                      <div className=\"voice-select\">\n                        <label htmlFor=\"voice\">Voice:</label>\n                        <select\n                          id=\"voice\"\n                          name=\"voice\"\n                          value={voiceIndex || \"\"}\n                          onChange={(event) => {\n                            setVoiceIndex(event.target.value);\n                          }}\n                          style={{ maxWidth: \"100%\" }}\n                        >\n                          <option value=\"\">Default</option>\n                          {voices.map((option, index) => (\n                            <option key={option.voiceURI} value={index}>\n                              {`${option.lang} - ${option.name}`}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      <div className=\"rate-pitch-sliders\">\n                        <div className=\"rate-slider\">\n                          <label htmlFor=\"rate\">Rate:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0.5\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={rate}\n                            onChange={(event) => setRate(event.target.value)}\n                          />\n                          <span>{rate}</span>\n                        </div>\n                        <div className=\"pitch-slider\">\n                          <label htmlFor=\"pitch\">Pitch:</label>\n                          <input\n                            type=\"range\"\n                            min=\"0\"\n                            max=\"2\"\n                            step=\"0.1\"\n                            value={pitch}\n                            onChange={(event) => setPitch(event.target.value)}\n                          />\n                          <span>{pitch}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-area\">\n                      <label htmlFor=\"message\">Message:</label>\n                      <textarea\n                        id=\"message\"\n                        name=\"message\"\n                        placeholder=\"Please type the message you want to speak out.\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <button\n                        className={`speak-button ${\n                          speaking ? \"speaking\" : \"\"\n                        }`}\n                        onClick={speaking ? cancel : () => speak({ text, voice, rate, pitch })}\n                      >\n                        {speaking ? \"Stop\" : \"Speak\"}\n                      </button>\n                    </div>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n        }\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          width: 100%;\n          height: 100%;\n          background: #fff;\n          padding: 20px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n        }\n        .title {\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n        .settings-container {\n          margin-bottom: 20px;\n        }\n        .voice-select {\n          margin-bottom: 10px;\n        }\n        .rate-pitch-sliders {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 20px;\n        }\n        .rate-slider,\n        .pitch-slider {\n          width: 45%;\n        }\n        .rate-slider span,\n        .pitch-slider span {\n          margin-left: 10px;\n        }\n        .text-area {\n          margin-bottom: 20px;\n        }\n        .text-area textarea {\n          width: 100%;\n          height: 100px;\n          resize: none;\n          padding: 10px;\n          font-size: 16px;\n          border-radius: 5px;\n          border: 1px solid #ccc;\n        }\n        .button-container {\n          display: flex;\n          justify-content: center;\n        }\n        .speak-button {\n          padding: 10px 20px;\n          font-size: 16px;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .speak-button:hover {\n          background-color: #4caf50;\n        }\n        .speak-button.speaking {\n          background-color: #f44336;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TextToSpeech;\n\n\n","// //\n// // import React, { useState } from \"react\";\n// // import Notes from \"./notes\";\n// //\n// // import SpeechRecognition, {\n// //   useSpeechRecognition,\n// // } from \"react-speech-recognition\";\n// //\n// // const SpeechToText = () => {\n// //   const [notes, setnotes] = useState([\n// //     { time: \"1\", val: \"Hello Everyone\" },\n// //     { time: \"2\", val: \"Welcome to Scanvue\" },\n// //   ]);\n// //   const {\n// //     transcript,\n// //     listening,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition,\n// //   } = useSpeechRecognition();\n// //   // SpeechRecognition.startListening({ continuous: false });\n// //\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return <span>Browser doesn't support speech recognition.</span>;\n// //   }\n// //\n// //   return (\n// //     <React.Fragment>\n// //       <div\n// //         className=\"row m-2 p-4\"\n// //         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n// //       >\n// //         <h1\n// //           style={{\n// //             fontFamily: \"Georgia, Times, serif\",\n// //             fontSize: \"45px\",\n// //             fontWeight: \"bolder\",\n// //           }}\n// //         >\n// //           Speech To Text\n// //         </h1>\n// //       </div>\n// //       <div className=\"column\">\n// //         <div className=\"row mx-2\">\n// //           <div className=\"col-5 p-5\" style={{ border: \"4px solid #f8f9fa\" }}>\n// //             {!listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Start\" and start speaking.\n// //               </div>\n// //             )}\n// //             {listening && (\n// //               <div className=\"p-3 mb-2 bg-light text-dark\">\n// //                 Please click \"Stop\" and stop speaking.\n// //               </div>\n// //             )}\n// //             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n// //             {!listening && (\n// //               <button\n// //                 className=\"btn btn-success \"\n// //                 onClick={() =>\n// //                   SpeechRecognition.startListening({ continuous: true })\n// //                 }\n// //               >\n// //                 Start\n// //               </button>\n// //             )}\n// //             {listening && (\n// //               <button\n// //                 className=\"btn btn-secondary \"\n// //                 onClick={SpeechRecognition.abortListening}\n// //               >\n// //                 Stop\n// //               </button>\n// //             )}\n// //             <button className=\"btn btn-warning mx-2\" onClick={resetTranscript}>\n// //               Reset\n// //             </button>\n// //             <hr />\n// //             {transcript && (\n// //               <React.Fragment>\n// //                 <h5 className=\"mx-3\">You speak:</h5>\n// //                 <div\n// //                   style={{\n// //                     margin: \"4px\",\n// //                     padding: \"10px\",\n// //                     border: \"2px solid #f8f9fa\",\n// //                     borderRadius: \"10px\",\n// //                     background: \"rgba(191, 191, 191, 0.7)\",\n// //                     minHeight: \"90px\",\n// //                   }}\n// //                 >\n// //                   {transcript}\n// //                 </div>\n// //                 <button\n// //                   className=\"btn btn-info mx-2\"\n// //                   onClick={() => {\n// //                     const x = notes;\n// //                     SpeechRecognition.abortListening();\n// //                     x.unshift({ time: Date.now(), val: transcript });\n// //                     setnotes(x);\n// //                     resetTranscript();\n// //                   }}\n// //                 >\n// //                   Save\n// //                 </button>\n// //                 <button\n// //                   className=\"btn btn-info\"\n// //                   onClick={() => {\n// //                     SpeechRecognition.abortListening();\n// //                     navigator.clipboard.writeText(transcript);\n// //                   }}\n// //                 >\n// //                   copy\n// //                 </button>\n// //               </React.Fragment>\n// //             )}\n// //           </div>\n// //           <div\n// //             className=\"col-7 px-5 py-2\"\n// //             style={{\n// //               border: \"4px solid #f8f9fa\",\n// //               height: \"500px\",\n// //             }}\n// //           >\n// //             <Notes notes={notes} setnotes={setnotes} />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </React.Fragment>\n// //   );\n// // };\n// // export default SpeechToText;\n// //\n//\n//\n//\n//\n//\n//\n//\n//\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n//\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\" style={{ overflowX: \"hidden\" }}>\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You speak:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow-x: hidden;\n//         }\n//\n//         .phone {\n//           background-color: #000;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #fff;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n////////////////////////////////////////////////////\n\n\n\n\n// import React, { useState } from \"react\";\n// import Notes from \"./notes\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const SpeechToText = () => {\n//   const [notes, setNotes] = useState([\n//     { time: \"1\", val: \"Hello Everyone\" },\n//     { time: \"2\", val: \"Welcome to Scanvue\" },\n//   ]);\n//\n//   const {\n//     transcript,\n//     listening,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition,\n//   } = useSpeechRecognition();\n//\n//   const { speak } = useSpeechSynthesis();\n//\n//   const handleStartListening = () => {\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const handleStopListening = () => {\n//     SpeechRecognition.abortListening();\n//   };\n//\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"phone-title\">Speech To Text</div>\n//           <div className=\"phone-content\">\n//             {!listening && (\n//               <div className=\"message\">\n//                 Please click \"Start\" and start speaking.\n//               </div>\n//             )}\n//             {listening && (\n//               <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n//             )}\n//             <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n//             {!listening && (\n//               <button className=\"btn btn-success\" onClick={handleStartListening}>\n//                 Start\n//               </button>\n//             )}\n//             {listening && (\n//               <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n//                 Stop\n//               </button>\n//             )}\n//             <button className=\"btn btn-warning\" onClick={resetTranscript}>\n//               Reset\n//             </button>\n//             <button\n//               className=\"btn btn-primary\"\n//               disabled={!transcript}\n//               onClick={() => speak({ text: transcript })}\n//             >\n//               Speak Transcription\n//             </button>\n//             <hr />\n//             {transcript && (\n//               <div>\n//                 <h5 className=\"mx-3\">You spoke:</h5>\n//                 <div className=\"transcript\">{transcript}</div>\n//                 <button\n//                   className=\"btn btn-info mx-2\"\n//                   onClick={() => {\n//                     const updatedNotes = [...notes];\n//                     updatedNotes.unshift({ time: Date.now(), val: transcript });\n//                     setNotes(updatedNotes);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Save\n//                 </button>\n//                 <button\n//                   className=\"btn btn-info\"\n//                   onClick={() => {\n//                     navigator.clipboard.writeText(transcript);\n//                     resetTranscript();\n//                   }}\n//                 >\n//                   Copy\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh;\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//         }\n//\n//         .phone {\n//           background-color: #fff;\n//           border-radius: 40px;\n//           overflow: hidden;\n//           max-width: 100%;\n//         }\n//\n//         .phone-screen {\n//           border-radius: 30px;\n//           height: 500px;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           color: #000;\n//         }\n//\n//         .phone-title {\n//           font-family: Arial, sans-serif;\n//           font-size: 24px;\n//           font-weight: bold;\n//           margin-bottom: 20px;\n//         }\n//\n//         .phone-content {\n//           text-align: center;\n//         }\n//\n//         .message {\n//           margin: 10px 0;\n//         }\n//\n//         .transcript {\n//           margin: 4px;\n//           padding: 10px;\n//           border: 2px solid #f8f9fa;\n//           border-radius: 10px;\n//           background: rgba(191, 191, 191, 0.7);\n//           min-height: 90px;\n//         }\n//\n//         .btn {\n//           margin: 10px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default SpeechToText;\n\n\n\n\n/////////////////////////////////\n\n\nimport React, { useState } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nconst SpeechToText = () => {\n  const [notes, setNotes] = useState([\n    { time: \"1\", val: \"Hello Everyone\" },\n    { time: \"2\", val: \"Welcome to Scanvue\" },\n  ]);\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  const { speak } = useSpeechSynthesis();\n\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const handleStopListening = () => {\n    SpeechRecognition.abortListening();\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Speech To Text</h1>\n              </div>\n              <div className=\"assistant-body\">\n                {!listening && (\n                  <div className=\"message\">\n                    Please click \"Start\" and start speaking.\n                  </div>\n                )}\n                {listening && (\n                  <div className=\"message\">Please click \"Stop\" to stop speaking.</div>\n                )}\n                <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n                {!listening && (\n                  <button className=\"btn btn-success\" onClick={handleStartListening}>\n                    Start\n                  </button>\n                )}\n                {listening && (\n                  <button className=\"btn btn-secondary\" onClick={handleStopListening}>\n                    Stop\n                  </button>\n                )}\n                <button className=\"btn btn-warning\" onClick={resetTranscript}>\n                  Reset\n                </button>\n                <button\n                  className=\"btn btn-primary\"\n                  disabled={!transcript}\n                  onClick={() => speak({ text: transcript })}\n                >\n                  Speak Transcription\n                </button>\n                <hr />\n                {transcript && (\n                  <div>\n                    <h5 className=\"mx-3\">You spoke:</h5>\n                    <div className=\"transcript\">{transcript}</div>\n                    <button\n                      className=\"btn btn-info mx-2\"\n                      onClick={() => {\n                        const updatedNotes = [...notes];\n                        updatedNotes.unshift({ time: Date.now(), val: transcript });\n                        setNotes(updatedNotes);\n                        resetTranscript();\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      className=\"btn btn-info\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(transcript);\n                        resetTranscript();\n                      }}\n                    >\n                      Copy\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh; /* Adjust the height to match FaceRecognition */\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n\n        .phone {\n          width: 85%; /* Adjust the width to match FaceRecognition */\n          height: 95%; /* Adjust the height to match FaceRecognition */\n          max-width: 750px; /* Set maximum width */\n          max-height: 800px; /* Set maximum height */\n          background-color: #fff; /* Change background color to white */\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          color: #000; /* Change text color to black */\n        }\n\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n\n        .assistant-content {\n          text-align: center;\n        }\n\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000; /* Add shadow effect */\n        }\n\n        .assistant-body {\n          text-align: center;\n          margin-top: 20px;\n        }\n\n        .message {\n          margin: 10px 0;\n        }\n\n        .transcript {\n          margin: 4px;\n          padding: 10px;\n          border: 2px solid #f8f9fa;\n          border-radius: 10px;\n          background: rgba(191, 191, 191, 0.7);\n          min-height: 90px;\n        }\n\n        .btn {\n          margin: 10px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n","// import React from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n//\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   //   SpeechRecognition.startListening({ continuous: true });\n//   const { speak } = useSpeechSynthesis();\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         }else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         }else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Hey Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//\n//         console.log(\"hii\");\n//       },\n//       //   matchInterim: true,\n//     },\n//     // {\n//     //   command: \"*\",\n//     //   callback: () => {\n//     //     speak({ text: \"Please repeat\" });\n//\n//     //     console.log(\"repeat\");\n//     //   },\n//     // },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <React.Fragment>\n//       <div\n//         className=\"row m-2 p-4\"\n//         style={{ background: \"#f5f5f5\", textAlign: \"center\" }}\n//       >\n//         <h1\n//           style={{\n//             fontFamily: \"Georgia, Times, serif\",\n//             fontSize: \"45px\",\n//             fontWeight: \"bolder\",\n//           }}\n//         >\n//           Assistant\n//         </h1>\n//       </div>\n//       <div style={{ border: \"10px solid gray\", padding: \"10px\" }}>\n// {/*         <div>Say \"Hey Jarvis\"</div> */}\n//         <h3>Say \"Hey Jarvis\"</h3>\n//         <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//         <button onClick={SpeechRecognition.startListening}>\n//           Start listening\n//         </button>\n//         &nbsp;\n//         <button onClick={SpeechRecognition.stopListening}>\n//           Stop listening\n//         </button>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n//\n// export default Assistant;\n\n\n\n\n\n\n////////////////////////////////////// final working code\n\n\n\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { useHistory } from \"react-router-dom\";\n// import { useSpeechSynthesis } from \"react-speech-kit\";\n//\n// const Assistant = () => {\n//   const history = useHistory();\n//   const { speak } = useSpeechSynthesis();\n//   const [isListening, setIsListening] = useState(false);\n//\n//   const startListening = () => {\n//     setIsListening(true);\n//     SpeechRecognition.startListening({ continuous: true });\n//   };\n//\n//   const stopListening = () => {\n//     setIsListening(false);\n//     SpeechRecognition.stopListening();\n//   };\n//\n//   const commands = [\n//     {\n//       command: \"Go to *\",\n//       callback: (link) => {\n//         const x = `Redirect to: ${link}`;\n//         console.log(x);\n//         if (link === \"object detection\") {\n//           speak({ text: x });\n//           history.push(`/object-detection`);\n//         } else if (link === \"face recognition\") {\n//           speak({ text: x });\n//           history.push(`/face-recognition`);\n//         } else if (link === \"image to text\") {\n//           speak({ text: x });\n//           history.push(`/image-to-text`);\n//         } else if (link === \"text to speech\") {\n//           speak({ text: x });\n//           history.push(`/text-to-speech`);\n//         } else if (link === \"speech to text\") {\n//           speak({ text: x });\n//           history.push(`/speech-to-text`);\n//         } else if (link === \"home\") {\n//           speak({ text: x });\n//           history.push(`/`);\n//         } else {\n//           speak({ text: \"I don't get it, Please try again!\" });\n//         }\n//       },\n//     },\n//     {\n//       command: \"Jarvis\",\n//       callback: () => {\n//         speak({ text: \"Hi Sir\" });\n//         console.log(\"hii\");\n//       },\n//     },\n//   ];\n//   const { transcript: t1 } = useSpeechRecognition({ commands });\n//\n//   return (\n//     <div className=\"phone-container\">\n//       <div className=\"phone\">\n//         <div className=\"phone-screen\">\n//           <div className=\"assistant-container\">\n//             <div className=\"assistant-content\">\n//               <div className=\"assistant-title\">\n//                 <h1>Assistant</h1>\n//               </div>\n//               <div className=\"assistant-body\">\n//                 <h3>Say \"Jarvis\"</h3>\n//                 <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n//                 <button\n//                   onClick={isListening ? stopListening : startListening}\n//                   className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n//                 >\n//                   {isListening ? \"Listening\" : \"Start Listening\"}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <style jsx>{`\n//         .phone-container {\n//           display: flex;\n//           justify-content: center;\n//           align-items: center;\n//           height: 100vh; /* Adjust the height to match FaceRecognition */\n//           background: linear-gradient(135deg, #2d75ff, #a8bfff);\n//           overflow: hidden;\n//         }\n//         .phone {\n//           width: 85%; /* Adjust the width to match FaceRecognition */\n//           height: 95%; /* Adjust the height to match FaceRecognition */\n//           max-width: 750px;\n//           max-height: 800px;\n//           background: #333;\n//           border-radius: 20px;\n//           overflow: hidden;\n//           box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n//         }\n//         .phone-screen {\n//           height: 100%;\n//           overflow-y: auto;\n//           padding: 20px;\n//           display: flex;\n//           flex-direction: column;\n//           justify-content: center;\n//           align-items: center;\n//           background: #fff;\n//         }\n//         .assistant-container {\n//           width: 100%;\n//           max-width: 400px;\n//         }\n//         .assistant-content {\n//           text-align: center;\n//         }\n//         .assistant-title {\n//           font-size: 28px;\n//           margin-bottom: 20px;\n//           text-shadow: 1px 1px 2px #000;\n//         }\n//         .assistant-body {\n//           margin-top: 20px;\n//         }\n//         .listening-btn {\n//           background-color: #f00;\n//           color: #fff;\n//           border: none;\n//           border-radius: 5px;\n//           padding: 10px;\n//           cursor: pointer;\n//           transition: background-color 0.3s ease;\n//         }\n//         .listening-btn.listening {\n//           background-color: #00f;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// };\n//\n// export default Assistant;\n\n\n/////////////////////////////////////////////////// Mike off\n\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nconst Assistant = () => {\n  const history = useHistory();\n  const { speak } = useSpeechSynthesis();\n  const [isListening, setIsListening] = useState(false);\n  const { transcript: t1 } = useSpeechRecognition();\n\n  useEffect(() => {\n    if (!isListening) {\n      SpeechRecognition.abortListening();\n    }\n  }, [isListening]);\n\n  const startListening = () => {\n    setIsListening(true);\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const stopListening = () => {\n    setIsListening(false);\n    SpeechRecognition.stopListening();\n  };\n\n  const commands = [\n    {\n      command: \"Go to *\",\n      callback: (link) => {\n        const x = `Redirect to: ${link}`;\n        console.log(x);\n        if (link === \"object detection\") {\n          speak({ text: x });\n          history.push(`/object-detection`);\n        } else if (link === \"face recognition\") {\n          speak({ text: x });\n          history.push(`/face-recognition`);\n        } else if (link === \"image to text\") {\n          speak({ text: x });\n          history.push(`/image-to-text`);\n        } else if (link === \"text to speech\") {\n          speak({ text: x });\n          history.push(`/text-to-speech`);\n        } else if (link === \"speech to text\") {\n          speak({ text: x });\n          history.push(`/speech-to-text`);\n        } else if (link === \"home\") {\n          speak({ text: x });\n          history.push(`/`);\n        } else {\n          speak({ text: \"I don't get it, Please try again!\" });\n        }\n      },\n    },\n    {\n      command: \"Zen\",\n      callback: () => {\n        speak({ text: \"Hi Sir\" });\n        console.log(\"hii\");\n      },\n    },\n  ];\n\n  useSpeechRecognition({ commands });\n\n  return (\n    <div className=\"phone-container\">\n      <div className=\"phone\">\n        <div className=\"phone-screen\">\n          <div className=\"assistant-container\">\n            <div className=\"assistant-content\">\n              <div className=\"assistant-title\">\n                <h1>Assistant</h1>\n              </div>\n              <div className=\"assistant-body\">\n                <h3>Say \"Zen\"</h3>\n                <p>{t1 ? t1 : \"Start listening for transcript\"}</p>\n                <button\n                  onClick={isListening ? stopListening : startListening}\n                  className={`listening-btn ${isListening ? \"listening\" : \"\"}`}\n                >\n                  {isListening ? \"Listening\" : \"Start Listening\"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        .phone-container {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 100vh;\n          background: linear-gradient(135deg, #2d75ff, #a8bfff);\n          overflow: hidden;\n        }\n        .phone {\n          width: 85%;\n          height: 95%;\n          max-width: 750px;\n          max-height: 800px;\n          background: #333;\n          border-radius: 20px;\n          overflow: hidden;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n        }\n        .phone-screen {\n          height: 100%;\n          overflow-y: auto;\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          background: #fff;\n        }\n        .assistant-container {\n          width: 100%;\n          max-width: 400px;\n        }\n        .assistant-content {\n          text-align: center;\n        }\n        .assistant-title {\n          font-size: 28px;\n          margin-bottom: 20px;\n          text-shadow: 1px 1px 2px #000;\n        }\n        .assistant-body {\n          margin-top: 20px;\n        }\n        .listening-btn {\n          background-color: #f00;\n          color: #fff;\n          border: none;\n          border-radius: 5px;\n          padding: 10px;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        .listening-btn.listening {\n          background-color: #00f;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Assistant;\n\n\n\n","import React from \"react\";\n\nconst PageNotFound = () => {\n  return (\n    <React.Fragment>\n      <h1>PageNotFound</h1>\n    </React.Fragment>\n  );\n};\n\nexport default PageNotFound;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/navbar\";\nimport Home from \"./components/home\";\nimport Footer from \"./components/footer\";\nimport Aboutus from \"./components/aboutus\";\nimport ObjectDetection from \"./components/objectDetection\";\nimport FaceRecognition from \"./components/faceRecognition\";\nimport ImageToText from \"./components/imageToText\";\nimport TextToSpeech from \"./components/textToSpeech\";\nimport SpeechToText from \"./components/speechToText\";\nimport Assistant from \"./components/assistant\";\nimport PageNotFound from \"./components/pageNotFound\";\nimport \"./App.css\";\n\nconst App = () => (\n  <React.Fragment>\n    <div id=\"page-container\">\n      <div id=\"content-wrap\">\n        <Navbar />\n        <div>\n          <Switch>\n            <Route path=\"/object-detection\" exact component={ObjectDetection} />\n            <Route path=\"/face-recognition\" exact component={FaceRecognition} />\n            <Route path=\"/image-to-text\" exact component={ImageToText} />\n            <Route path=\"/text-to-speech\" exact component={TextToSpeech} />\n            <Route path=\"/speech-to-text\" exact component={SpeechToText} />\n            <Route path=\"/assistant\" exact component={Assistant} />\n            <Route path=\"/about-us\" exact component={Aboutus} />\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/page-not-found\" exact component={PageNotFound} />\n\n            <Redirect to=\"/page-not-found\" />\n          </Switch>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  </React.Fragment>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.js\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyPadding\":\"navbar_bodyPadding__3BNWY\",\"title\":\"navbar_title__6XvXD\",\"brand\":\"navbar_brand__1kqhL\",\"x\":\"navbar_x__FhmIW\",\"navbar\":\"navbar_navbar__kQLgu\"};"],"sourceRoot":""}